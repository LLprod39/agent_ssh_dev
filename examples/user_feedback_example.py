"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞—á
- –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á–µ—Ç–æ–≤
- –≠–∫—Å–ø–æ—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
"""
import time
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
import sys
sys.path.append(str(Path(__file__).parent.parent))

from src.utils.user_feedback_system import UserFeedbackSystem, FeedbackConfig
from src.models.planning_model import Task, TaskStep, TaskStatus, StepStatus, Priority
from src.utils.logger import setup_logging


def create_sample_task() -> Task:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    task = Task(
        task_id="demo_task_001",
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞",
        description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        priority=Priority.HIGH
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
    steps = [
        TaskStep(
            step_id="step_001",
            title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
            priority=Priority.MEDIUM,
            estimated_duration=5
        ),
        TaskStep(
            step_id="step_002", 
            title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx",
            description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Nginx",
            priority=Priority.HIGH,
            estimated_duration=10
        ),
        TaskStep(
            step_id="step_003",
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞",
            priority=Priority.HIGH,
            estimated_duration=15
        ),
        TaskStep(
            step_id="step_004",
            title="–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            description="–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞",
            priority=Priority.MEDIUM,
            estimated_duration=10
        )
    ]
    
    for step in steps:
        task.add_step(step)
    
    return task


def simulate_task_execution(feedback_system: UserFeedbackSystem, task: Task):
    """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    
    # –ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
    task.mark_started()
    feedback_system.on_task_started(task)
    
    execution_results = {
        "successful_commands": 0,
        "failed_commands": 0,
        "autocorrections_applied": 0
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏
    for i, step in enumerate(task.steps):
        print(f"\nüìã –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ {i+1}: {step.title}")
        
        # –ù–∞—á–∞–ª–æ —à–∞–≥–∞
        step.mark_started()
        feedback_system.on_step_started(task, step)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        commands = [
            f"apt update",
            f"apt install nginx -y" if "nginx" in step.title.lower() else f"echo '–í—ã–ø–æ–ª–Ω—è–µ–º {step.title}'",
            f"systemctl enable nginx" if "nginx" in step.title.lower() else f"echo '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'"
        ]
        
        step_success = True
        for j, command in enumerate(commands):
            print(f"  üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {command}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            success = j != 1 or "nginx" not in step.title.lower()  # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
            duration = 2.5 + (j * 0.5)
            
            if success:
                execution_results["successful_commands"] += 1
                output = f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                error = ""
                exit_code = 0
            else:
                execution_results["failed_commands"] += 1
                output = ""
                error = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}"
                exit_code = 1
                step_success = False
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            feedback_system.on_command_executed(
                task_id=task.task_id,
                step_id=step.step_id,
                command=command,
                success=success,
                duration=duration,
                output=output,
                error=error,
                exit_code=exit_code
            )
            
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
        if not step_success and "nginx" in step.title.lower():
            print("  üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é...")
            feedback_system.on_autocorrection_applied(
                task_id=task.task_id,
                step_id=step.step_id,
                original_command="apt install nginx -y",
                corrected_command="apt install nginx -y --fix-missing",
                correction_type="package_fix",
                success=True
            )
            execution_results["autocorrections_applied"] += 1
            step_success = True
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —à–∞–≥–∞
        if step_success:
            step.mark_completed()
            feedback_system.on_step_completed(task, step, step.get_duration() or 0)
            print(f"  ‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            step.mark_failed()
            feedback_system.on_step_failed(
                task=task,
                step=step,
                error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                retry_count=1,
                autocorrection_applied=False
            )
            print(f"  ‚ùå –®–∞–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        completed_steps = len([s for s in task.steps if s.status == StepStatus.COMPLETED])
        feedback_system.on_task_progress(task, completed_steps, step)
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if task.is_completed():
        task.mark_completed()
        feedback_system.on_task_completed(task, execution_results)
        print("\nüéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        task.mark_failed()
        feedback_system.on_task_failed(task, "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å", execution_results)
        print("\nüí• –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")


def demonstrate_reports(feedback_system: UserFeedbackSystem, task: Task):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    execution_results = {
        "successful_commands": 8,
        "failed_commands": 1,
        "autocorrections_applied": 1
    }
    
    report = feedback_system.generate_task_report(task, execution_results)
    print(f"  üìÑ –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: {report.report_id}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    exported_files = feedback_system.report_generator.export_report(report)
    print(f"  üìÅ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–∞–π–ª—ã: {list(exported_files.keys())}")


def demonstrate_timeline(feedback_system: UserFeedbackSystem, task: Task):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã"""
    print("\n‚è∞ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É...")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
    timeline_file = feedback_system.export_task_timeline(task.task_id, "json")
    print(f"  üìà –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {timeline_file}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
    timeline = feedback_system.get_task_timeline(task.task_id)
    print(f"  üìä –°–æ–±—ã—Ç–∏–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ: {len(timeline)}")


def demonstrate_notifications(feedback_system: UserFeedbackSystem):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüîî –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notifications = feedback_system.get_notification_history(hours=1)
    
    for notification in notifications[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        print(f"  üì¢ {notification['title']} ({notification['timestamp']})")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = FeedbackConfig(
        notifications={
            "enabled": True,
            "console": {"enabled": True},
            "log": {"enabled": True},
            "email": {"enabled": False},
            "webhook": {"enabled": False},
            "file": {"enabled": True, "file_path": "demo_notifications.log"}
        },
        reports={
            "enabled": True,
            "output_dir": "demo_reports",
            "formats": ["json", "html", "markdown"],
            "include_timeline": True,
            "include_performance": True,
            "include_error_analysis": True
        },
        timeline={
            "enabled": True,
            "auto_create_segments": True,
            "max_events_per_task": 1000,
            "enable_performance_analysis": True,
            "export_dir": "demo_timeline"
        },
        enabled=True
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    feedback_system = UserFeedbackSystem(config)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –∑–∞–¥–∞—á—É
    task = create_sample_task()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    simulate_task_execution(feedback_system, task)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    demonstrate_reports(feedback_system, task)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
    demonstrate_timeline(feedback_system, task)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    demonstrate_notifications(feedback_system)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    print("\nüìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")
    status = feedback_system.get_system_status()
    print(f"  üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {status['notifications']['notifications_sent']}")
    print(f"  üìÑ –û—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {status['reports']['total_reports']}")
    print(f"  ‚è∞ –°–æ–±—ã—Ç–∏–π –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª–µ: {status['timeline']['total_events']}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("  - demo_notifications.log - —Ñ–∞–π–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("  - demo_reports/ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏")
    print("  - demo_timeline/ - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏")


if __name__ == "__main__":
    main()
