#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Error Handler

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Error Handler
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —à–∞–≥–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
- –°–±–æ—Ä —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
- –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
"""

import sys
import os
import time
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from config.agent_config import AgentConfig
from agents.error_handler import ErrorHandler, ErrorReportType, ServerSnapshotType
from models.planning_model import Task, TaskStep, StepStatus, Priority
from utils.error_tracker import ErrorRecord, ErrorSeverity
from connectors.ssh_connector import SSHConnector


def create_mock_task() -> Task:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    task = Task(
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL",
        description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
    step1 = TaskStep(
        title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        description="–û–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
        priority=Priority.HIGH
    )
    
    step2 = TaskStep(
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL",
        description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL —Å–µ—Ä–≤–µ—Ä",
        priority=Priority.HIGH,
        dependencies=[step1.step_id]
    )
    
    step3 = TaskStep(
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL",
        priority=Priority.MEDIUM,
        dependencies=[step2.step_id]
    )
    
    task.add_step(step1)
    task.add_step(step2)
    task.add_step(step3)
    
    return task


def create_mock_ssh_connector() -> SSHConnector:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    return None


def simulate_errors(error_handler: ErrorHandler, task: Task):
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\n=== –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ ===")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    step1 = task.steps[0]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
    for i in range(3):
        error_handler.error_tracker.record_error(
            step_id=step1.step_id,
            command=f"apt update",
            error_message=f"Permission denied: unable to update package lists (attempt {i+1})",
            exit_code=1,
            metadata={"attempt": i+1}
        )
        time.sleep(0.1)
    
    print(f"–ó–∞–ø–∏—Å–∞–Ω–æ 3 –æ—à–∏–±–∫–∏ –¥–ª—è —à–∞–≥–∞ {step1.step_id}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞
    step2 = task.steps[1]
    
    for i in range(5):  # –ü—Ä–µ–≤—ã—à–∞–µ–º –ø–æ—Ä–æ–≥
        error_handler.error_tracker.record_error(
            step_id=step2.step_id,
            command=f"apt install postgresql",
            error_message=f"Package 'postgresql' not found in repository (attempt {i+1})",
            exit_code=1,
            metadata={"attempt": i+1}
        )
        time.sleep(0.1)
    
    print(f"–ó–∞–ø–∏—Å–∞–Ω–æ 5 –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞ {step2.step_id} (–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥)")


def demonstrate_error_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Error Handler ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = AgentConfig.from_yaml("../config/agent_config.yaml")
        print("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º Error Handler
    ssh_connector = create_mock_ssh_connector()
    error_handler = ErrorHandler(config, ssh_connector)
    print("‚úì Error Handler —Å–æ–∑–¥–∞–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_mock_task()
    print(f"‚úì –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.title}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫–∏
    def planner_callback(report):
        print(f"\nüìã –û–¢–ß–ï–¢ –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:")
        print(f"   ID: {report.report_id}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {report.title}")
        print(f"   –°–≤–æ–¥–∫–∞: {report.summary}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(report.recommendations)}")
        for i, rec in enumerate(report.recommendations[:3], 1):
            print(f"     {i}. {rec}")
    
    def human_escalation_callback(report):
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø –ö –ß–ï–õ–û–í–ï–ö–£:")
        print(f"   ID: {report.report_id}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {report.title}")
        print(f"   –°–≤–æ–¥–∫–∞: {report.summary}")
        print(f"   –°–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: {len(report.server_snapshots)}")
    
    error_handler.register_planner_callback(planner_callback)
    error_handler.register_human_escalation_callback(human_escalation_callback)
    print("‚úì –ö–æ–ª–±—ç–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    simulate_errors(error_handler, task)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —à–∞–≥–æ–≤
    print("\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —à–∞–≥–æ–≤ ===")
    
    for step in task.steps:
        error_count = error_handler.error_tracker.get_step_error_count(step.step_id)
        if error_count > 0:
            print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞: {step.title}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error_count}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —à–∞–≥–∞
            error_details = {
                "step_title": step.title,
                "error_count": error_count,
                "timestamp": datetime.now().isoformat()
            }
            
            report = error_handler.handle_step_error(step.step_id, task, error_details)
            if report:
                print(f"‚úì –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç: {report.report_id}")
            else:
                print("  –ü–æ—Ä–æ–≥ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–±–æ—Ä —Å–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n=== –°–±–æ—Ä —Å–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ ===")
    
    snapshot_types = [
        ServerSnapshotType.SYSTEM_INFO,
        ServerSnapshotType.SERVICE_STATUS,
        ServerSnapshotType.DISK_USAGE
    ]
    
    for snapshot_type in snapshot_types:
        snapshot = error_handler.take_server_snapshot(snapshot_type)
        print(f"‚úì –°–Ω–∏–º–æ–∫ {snapshot_type.value}: {snapshot.snapshot_id}")
        print(f"  –î–∞–Ω–Ω—ã–µ: {len(str(snapshot.data))} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
    print("\n=== –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫ ===")
    
    patterns = error_handler.analyze_error_patterns(time_window_hours=1)
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
    
    for pattern in patterns:
        print(f"\n–ü–∞—Ç—Ç–µ—Ä–Ω: {pattern.pattern_name}")
        print(f"  –ß–∞—Å—Ç–æ—Ç–∞: {pattern.frequency}")
        print(f"  –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —à–∞–≥–∏: {len(pattern.affected_steps)}")
        print(f"  –†–µ—à–µ–Ω–∏—è: {len(pattern.suggested_solutions)}")
        for solution in pattern.suggested_solutions[:2]:
            print(f"    - {solution}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ
    print("\n=== –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ ===")
    
    execution_results = {
        "total_duration": 300.5,
        "steps_completed": 1,
        "steps_failed": 2,
        "total_commands": 15,
        "successful_commands": 5,
        "failed_commands": 10
    }
    
    final_report = error_handler.handle_task_completion(task, execution_results)
    print(f"‚úì –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {final_report.report_id}")
    print(f"  –¢–∏–ø: {final_report.report_type.value}")
    print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {final_report.title}")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(final_report.recommendations)}")
    print(f"  –°–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: {len(final_report.server_snapshots)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Error Handler ===")
    
    stats = error_handler.get_handler_stats()
    print(f"–û—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['reports_generated']}")
    print(f"–°–Ω–∏–º–∫–æ–≤ —Å–¥–µ–ª–∞–Ω–æ: {stats['snapshots_taken']}")
    print(f"–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {stats['patterns_identified']}")
    print(f"–≠—Å–∫–∞–ª–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['escalations_sent']}")
    print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats['recommendations_generated']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –æ—à–∏–±–∫–∞–º
    print("\n=== –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º ===")
    
    error_summary = error_handler.get_error_summary()
    print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_summary['total_errors']}")
    print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {error_summary['total_attempts']}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {error_summary['success_rate']:.1f}%")
    print(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —à–∞–≥–æ–≤: {error_summary['steps_tracked']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
    print("\n=== –ù–µ–¥–∞–≤–Ω–∏–µ –æ—Ç—á–µ—Ç—ã ===")
    
    recent_reports = error_handler.get_recent_reports(hours=1)
    print(f"–û—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {len(recent_reports)}")
    
    for report in recent_reports:
        print(f"  - {report.report_id}: {report.title}")
    
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")


def demonstrate_server_snapshots():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∞ —Å–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–Ω–∏–º–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ ===")
    
    try:
        config = AgentConfig.from_yaml("../config/agent_config.yaml")
        error_handler = ErrorHandler(config, None)  # –ë–µ–∑ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–Ω–∏–º–∫–æ–≤
        snapshot_types = [
            ServerSnapshotType.SYSTEM_INFO,
            ServerSnapshotType.PROCESS_LIST,
            ServerSnapshotType.DISK_USAGE,
            ServerSnapshotType.MEMORY_USAGE,
            ServerSnapshotType.NETWORK_STATUS,
            ServerSnapshotType.SERVICE_STATUS,
            ServerSnapshotType.LOG_ANALYSIS
        ]
        
        for snapshot_type in snapshot_types:
            print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞: {snapshot_type.value}")
            snapshot = error_handler.take_server_snapshot(snapshot_type)
            print(f"‚úì –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: {snapshot.snapshot_id}")
            print(f"  –¢–∏–ø: {snapshot.snapshot_type.value}")
            print(f"  –í—Ä–µ–º—è: {snapshot.timestamp}")
            print(f"  –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(str(snapshot.data))} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            if snapshot.data and "error" not in snapshot.data:
                first_key = list(snapshot.data.keys())[0]
                print(f"  –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö ({first_key}): {str(snapshot.data[first_key])[:100]}...")
            else:
                print(f"  –î–∞–Ω–Ω—ã–µ: {snapshot.data}")
        
        print(f"\n‚úì –í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(error_handler.server_snapshots)}")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–∏–º–∫–æ–≤: {e}")


def demonstrate_error_patterns():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===")
    
    try:
        config = AgentConfig.from_yaml("../config/agent_config.yaml")
        error_handler = ErrorHandler(config, None)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        error_scenarios = [
            {
                "step_id": "step_1",
                "command": "apt update",
                "error_message": "Permission denied: unable to update package lists",
                "count": 3
            },
            {
                "step_id": "step_2", 
                "command": "apt install postgresql",
                "error_message": "Package 'postgresql' not found in repository",
                "count": 4
            },
            {
                "step_id": "step_3",
                "command": "systemctl start postgresql",
                "error_message": "Failed to start postgresql.service: Unit not found",
                "count": 2
            },
            {
                "step_id": "step_4",
                "command": "sudo apt update",
                "error_message": "Permission denied: unable to update package lists",
                "count": 2
            }
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        for scenario in error_scenarios:
            for i in range(scenario["count"]):
                error_handler.error_tracker.record_error(
                    step_id=scenario["step_id"],
                    command=scenario["command"],
                    error_message=scenario["error_message"],
                    exit_code=1,
                    metadata={"scenario": scenario["step_id"], "attempt": i+1}
                )
        
        print(f"–ó–∞–ø–∏—Å–∞–Ω–æ –æ—à–∏–±–æ–∫: {sum(s['count'] for s in error_scenarios)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = error_handler.analyze_error_patterns(time_window_hours=1)
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}")
        
        for i, pattern in enumerate(patterns, 1):
            print(f"\n–ü–∞—Ç—Ç–µ—Ä–Ω {i}: {pattern.pattern_name}")
            print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {pattern.description}")
            print(f"  –ß–∞—Å—Ç–æ—Ç–∞: {pattern.frequency}")
            print(f"  –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {pattern.severity}")
            print(f"  –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —à–∞–≥–∏: {pattern.affected_steps}")
            print(f"  –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: {pattern.common_commands}")
            print(f"  –†–µ—à–µ–Ω–∏—è ({len(pattern.suggested_solutions)}):")
            for solution in pattern.suggested_solutions:
                print(f"    - {solution}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
        print(f"  –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(error_handler.error_patterns)}")
        print(f"  –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∑–∞ —á–∞—Å: {len(patterns)}")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Error Handler")
    print("=" * 50)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        demonstrate_error_handling()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demonstrate_server_snapshots()
        demonstrate_error_patterns()
        
        print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
