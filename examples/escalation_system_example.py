#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç—Å–∫–∞–ª–∞—Ü–∏–∏ - –®–∞–≥ 4.2

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –û—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
- –ú–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–æ–≤
- –°–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É-–æ–ø–µ—Ä–∞—Ç–æ—Ä—É
"""
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from src.config.agent_config import AgentConfig
from src.agents.error_handler import ErrorHandler
from src.agents.escalation_system import EscalationSystem, EscalationType, EscalationStatus
from src.agents.human_operator_system import HumanOperatorSystem, NotificationMethod
from src.agents.task_agent import TaskAgent
from src.agents.subtask_agent import SubtaskAgent
from src.models.planning_model import Task, TaskStep, StepStatus, Priority
from src.utils.logger import StructuredLogger


def create_test_task() -> Task:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    task = Task(
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL",
        description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏
    step1 = TaskStep(
        title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã",
        priority=Priority.HIGH,
        estimated_duration=10
    )
    
    step2 = TaskStep(
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL",
        description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL —Å–µ—Ä–≤–µ—Ä–∞",
        priority=Priority.HIGH,
        estimated_duration=15,
        dependencies=[step1.step_id]
    )
    
    step3 = TaskStep(
        title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL",
        description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL",
        priority=Priority.MEDIUM,
        estimated_duration=20,
        dependencies=[step2.step_id]
    )
    
    task.add_step(step1)
    task.add_step(step2)
    task.add_step(step3)
    
    return task


def simulate_errors(error_handler: ErrorHandler, step_id: str, error_count: int):
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏"""
    logger = StructuredLogger("ErrorSimulator")
    
    logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è {error_count} –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞ {step_id}")
    
    for i in range(error_count):
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_types = [
            "permission denied",
            "command not found",
            "connection refused",
            "syntax error",
            "file not found"
        ]
        
        error_type = error_types[i % len(error_types)]
        command = f"test_command_{i+1}"
        error_message = f"Error {i+1}: {error_type} - command failed"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        error_handler.error_tracker.record_error(
            step_id=step_id,
            command=command,
            error_message=error_message,
            exit_code=1,
            autocorrection_applied=False
        )
        
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞


def test_planner_notification():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = {
        "llm": {
            "api_key": "test-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4",
            "max_tokens": 4000,
            "temperature": 0.7,
            "timeout": 60
        },
        "error_handler": {
            "error_threshold_per_step": 3,
            "human_escalation_threshold": 5,
            "max_retention_days": 7,
            "escalation_cooldown_minutes": 5
        }
    }
    config = AgentConfig(**config_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    error_handler = ErrorHandler(config)
    task_agent = TaskAgent(config)
    subtask_agent = SubtaskAgent(config)
    escalation_system = EscalationSystem(config, error_handler, task_agent, subtask_agent)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    error_handler.set_escalation_system(escalation_system)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_test_task()
    step_id = task.steps[0].step_id
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–≥: {task.steps[0].title}")
    print(f"–ü–æ—Ä–æ–≥ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {config.error_handler.error_threshold_per_step}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ –ø–æ—Ä–æ–≥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    simulate_errors(error_handler, step_id, config.error_handler.error_threshold_per_step)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    error_details = {
        "recent_errors": [
            {
                "command": "apt update",
                "error_message": "permission denied",
                "timestamp": datetime.now().isoformat()
            }
        ]
    }
    
    escalation_request = escalation_system.handle_escalation(step_id, task, config.error_handler.error_threshold_per_step, error_details)
    
    if escalation_request:
        print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –°—Ç–∞—Ç—É—Å: {escalation_request.status.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
    else:
        print("‚ùå –≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = escalation_system.get_escalation_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–π:")
    print(f"  –í—Å–µ–≥–æ —ç—Å–∫–∞–ª–∞—Ü–∏–π: {stats['total_escalations']}")
    print(f"  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É: {stats['planner_notifications']}")


def test_plan_revision():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = {
        "llm": {
            "api_key": "test-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4",
            "max_tokens": 4000,
            "temperature": 0.7,
            "timeout": 60
        },
        "error_handler": {
            "error_threshold_per_step": 3,
            "human_escalation_threshold": 5,
            "max_retention_days": 7,
            "escalation_cooldown_minutes": 5
        }
    }
    config = AgentConfig(**config_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    error_handler = ErrorHandler(config)
    task_agent = TaskAgent(config)
    subtask_agent = SubtaskAgent(config)
    escalation_system = EscalationSystem(config, error_handler, task_agent, subtask_agent)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    error_handler.set_escalation_system(escalation_system)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_test_task()
    step_id = task.steps[1].step_id
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–≥: {task.steps[1].title}")
    print(f"–ü–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞: {config.error_handler.error_threshold_per_step + 1}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ –ø–æ—Ä–æ–≥–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞
    error_count = config.error_handler.error_threshold_per_step + 1
    simulate_errors(error_handler, step_id, error_count)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    error_details = {
        "recent_errors": [
            {
                "command": "apt install postgresql",
                "error_message": "package not found",
                "timestamp": datetime.now().isoformat()
            }
        ]
    }
    
    escalation_request = escalation_system.handle_escalation(step_id, task, error_count, error_details)
    
    if escalation_request:
        print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –°—Ç–∞—Ç—É—Å: {escalation_request.status.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞
        revision_requests = escalation_system.plan_revision_requests
        if revision_requests:
            revision_request = list(revision_requests.values())[0]
            print(f"\nüìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞:")
            print(f"   ID: {revision_request.revision_id}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {revision_request.priority}")
            print(f"   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {len(revision_request.suggested_changes)}")
            for i, change in enumerate(revision_request.suggested_changes[:3], 1):
                print(f"     {i}. {change}")
    else:
        print("‚ùå –≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = escalation_system.get_escalation_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–π:")
    print(f"  –í—Å–µ–≥–æ —ç—Å–∫–∞–ª–∞—Ü–∏–π: {stats['total_escalations']}")
    print(f"  –ü–µ—Ä–µ—Å–º–æ—Ç—Ä—ã –ø–ª–∞–Ω–æ–≤: {stats['plan_revisions']}")


def test_human_escalation():
    """–¢–µ—Å—Ç —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = {
        "llm": {
            "api_key": "test-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4",
            "max_tokens": 4000,
            "temperature": 0.7,
            "timeout": 60
        },
        "error_handler": {
            "error_threshold_per_step": 3,
            "human_escalation_threshold": 5,
            "max_retention_days": 7,
            "escalation_cooldown_minutes": 5
        }
    }
    config = AgentConfig(**config_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    error_handler = ErrorHandler(config)
    task_agent = TaskAgent(config)
    subtask_agent = SubtaskAgent(config)
    escalation_system = EscalationSystem(config, error_handler, task_agent, subtask_agent)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator_config = {
        "email_notifications": {
            "enabled": False  # –û—Ç–∫–ª—é—á–∞–µ–º email –¥–ª—è —Ç–µ—Å—Ç–∞
        },
        "webhook_notifications": {
            "enabled": False  # –û—Ç–∫–ª—é—á–∞–µ–º webhook –¥–ª—è —Ç–µ—Å—Ç–∞
        },
        "console_notifications": {
            "enabled": True  # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }
    }
    
    human_operator_system = HumanOperatorSystem(operator_config)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É
    def handle_human_escalation(escalation_request):
        print(f"üö® –ü–û–õ–£–ß–ï–ù–ê –≠–°–ö–ê–õ–ê–¶–ò–Ø –ö –ß–ï–õ–û–í–ï–ö–£!")
        print(f"   ID: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        notification = human_operator_system.handle_escalation(escalation_request)
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {notification.notification_id}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {notification.priority}")
        print(f"   –ú–µ—Ç–æ–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {[m.value for m in notification.notification_methods]}")
    
    escalation_system.register_human_escalation_callback(handle_human_escalation)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    error_handler.set_escalation_system(escalation_system)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_test_task()
    step_id = task.steps[2].step_id
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–≥: {task.steps[2].title}")
    print(f"–ü–æ—Ä–æ–≥ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É: {config.error_handler.human_escalation_threshold}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ –ø–æ—Ä–æ–≥–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É
    error_count = config.error_handler.human_escalation_threshold
    simulate_errors(error_handler, step_id, error_count)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    error_details = {
        "recent_errors": [
            {
                "command": "systemctl start postgresql",
                "error_message": "service failed to start",
                "timestamp": datetime.now().isoformat()
            }
        ]
    }
    
    escalation_request = escalation_system.handle_escalation(step_id, task, error_count, error_details)
    
    if escalation_request:
        print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –°—Ç–∞—Ç—É—Å: {escalation_request.status.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
    else:
        print("‚ùå –≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = escalation_system.get_escalation_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–π:")
    print(f"  –í—Å–µ–≥–æ —ç—Å–∫–∞–ª–∞—Ü–∏–π: {stats['total_escalations']}")
    print(f"  –≠—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É: {stats['human_escalations']}")
    
    operator_stats = human_operator_system.get_operator_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
    print(f"  –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {operator_stats['total_notifications']}")
    print(f"  –û–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {operator_stats['pending_notifications']}")


def test_emergency_stop():
    """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = {
        "llm": {
            "api_key": "test-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4",
            "max_tokens": 4000,
            "temperature": 0.7,
            "timeout": 60
        },
        "error_handler": {
            "error_threshold_per_step": 3,
            "human_escalation_threshold": 5,
            "max_retention_days": 7,
            "escalation_cooldown_minutes": 5
        }
    }
    config = AgentConfig(**config_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    error_handler = ErrorHandler(config)
    task_agent = TaskAgent(config)
    subtask_agent = SubtaskAgent(config)
    escalation_system = EscalationSystem(config, error_handler, task_agent, subtask_agent)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator_config = {
        "console_notifications": {"enabled": True}
    }
    
    human_operator_system = HumanOperatorSystem(operator_config)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    def handle_emergency_stop(escalation_request):
        print(f"üö®üö®üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê! üö®üö®üö®")
        print(f"   ID: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
        print(f"   –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø - –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        notification = human_operator_system.handle_escalation(escalation_request)
        print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {notification.notification_id}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {notification.priority}")
    
    escalation_system.register_human_escalation_callback(handle_emergency_stop)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    error_handler.set_escalation_system(escalation_system)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_test_task()
    step_id = task.steps[0].step_id
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–≥: {task.steps[0].title}")
    print(f"–ü–æ—Ä–æ–≥ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {config.error_handler.human_escalation_threshold + 2}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ –ø–æ—Ä–æ–≥–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    error_count = config.error_handler.human_escalation_threshold + 2
    simulate_errors(error_handler, step_id, error_count)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    error_details = {
        "recent_errors": [
            {
                "command": "rm -rf /",
                "error_message": "permission denied - critical system protection",
                "timestamp": datetime.now().isoformat()
            }
        ]
    }
    
    escalation_request = escalation_system.handle_escalation(step_id, task, error_count, error_details)
    
    if escalation_request:
        print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {escalation_request.escalation_id}")
        print(f"   –¢–∏–ø: {escalation_request.escalation_type.value}")
        print(f"   –°—Ç–∞—Ç—É—Å: {escalation_request.status.value}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {escalation_request.reason}")
    else:
        print("‚ùå –≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = escalation_system.get_escalation_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–π:")
    print(f"  –í—Å–µ–≥–æ —ç—Å–∫–∞–ª–∞—Ü–∏–π: {stats['total_escalations']}")
    print(f"  –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stats['emergency_stops']}")


def test_escalation_resolution():
    """–¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_data = {
        "llm": {
            "api_key": "test-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4",
            "max_tokens": 4000,
            "temperature": 0.7,
            "timeout": 60
        },
        "error_handler": {
            "error_threshold_per_step": 3,
            "human_escalation_threshold": 5,
            "max_retention_days": 7,
            "escalation_cooldown_minutes": 5
        }
    }
    config = AgentConfig(**config_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    error_handler = ErrorHandler(config)
    task_agent = TaskAgent(config)
    subtask_agent = SubtaskAgent(config)
    escalation_system = EscalationSystem(config, error_handler, task_agent, subtask_agent)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    error_handler.set_escalation_system(escalation_system)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = create_test_task()
    step_id = task.steps[0].step_id
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    error_count = config.error_handler.error_threshold_per_step
    simulate_errors(error_handler, step_id, error_count)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    error_details = {
        "recent_errors": [
            {
                "command": "apt update",
                "error_message": "permission denied",
                "timestamp": datetime.now().isoformat()
            }
        ]
    }
    
    escalation_request = escalation_system.handle_escalation(step_id, task, error_count, error_details)
    
    if escalation_request:
        print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {escalation_request.escalation_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {escalation_request.status.value}")
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
        resolution = "–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ sudo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        success = escalation_system.resolve_escalation(escalation_request.escalation_id, resolution)
        
        if success:
            print(f"‚úÖ –≠—Å–∫–∞–ª–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
            print(f"   –†–µ—à–µ–Ω–∏–µ: {resolution}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = escalation_system.get_escalation_status(escalation_request.escalation_id)
            if status:
                print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status['status']}")
                print(f"   –í—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {status['resolved_at']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏—é")
    else:
        print("‚ùå –≠—Å–∫–∞–ª–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = escalation_system.get_escalation_stats()
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–π:")
    print(f"  –í—Å–µ–≥–æ —ç—Å–∫–∞–ª–∞—Ü–∏–π: {stats['total_escalations']}")
    print(f"  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {stats['resolved_escalations']}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –≠–°–ö–ê–õ–ê–¶–ò–ò - –®–ê–ì 4.2")
    print("="*80)
    
    try:
        # –¢–µ—Å—Ç 1: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        test_planner_notification()
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞
        test_plan_revision()
        
        # –¢–µ—Å—Ç 3: –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É
        test_human_escalation()
        
        # –¢–µ—Å—Ç 4: –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        test_emergency_stop()
        
        # –¢–µ—Å—Ç 5: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        test_escalation_resolution()
        
        print("\n" + "="*80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´ –≠–°–ö–ê–õ–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*80)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
