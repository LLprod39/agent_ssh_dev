"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Task Agent
"""
import sys
from pathlib import Path
from unittest.mock import patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.agents.task_agent import TaskAgent, TaskPlanningContext
from src.config.agent_config import AgentConfig
from src.models.llm_interface import MockLLMInterface


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    
    print("=== –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Task Agent ===\n")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_path = project_root / "examples" / "test_config.yaml"
        config = AgentConfig.from_yaml(str(config_path))
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ LLM
        mock_interface = MockLLMInterface()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Task Agent —Å –º–æ–∫-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
        with patch('src.agents.task_agent.LLMInterfaceFactory.create_interface') as mock_factory:
            mock_factory.return_value = mock_interface
            
            task_agent = TaskAgent(config)
            task_agent.llm_interface = mock_interface
            print("‚úÖ Task Agent —Å–æ–∑–¥–∞–Ω (–º–æ–∫-—Ä–µ–∂–∏–º)")
            
            # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
            print("\n--- –ü—Ä–∏–º–µ—Ä 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx ---")
            simple_task = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å nginx –Ω–∞ Ubuntu —Å–µ—Ä–≤–µ—Ä–µ"
            
            result = task_agent.plan_task(simple_task)
            
            if result.success:
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {result.task.title}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(result.task.steps)}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.planning_duration:.2f}s")
                
                print("\nüìã –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                for i, step in enumerate(result.task.steps, 1):
                    print(f"  {i}. {step.title}")
                    print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {step.description}")
                    print(f"     –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {step.priority.value}")
                    if step.estimated_duration:
                        print(f"     –í—Ä–µ–º—è: {step.estimated_duration} –º–∏–Ω")
                    if step.dependencies:
                        print(f"     –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(step.dependencies)}")
                    print()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {result.error_message}")
            
            # –ü—Ä–∏–º–µ—Ä 2: –ó–∞–¥–∞—á–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            print("\n--- –ü—Ä–∏–º–µ—Ä 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —Å SSL ---")
            
            context = TaskPlanningContext(
                server_info={
                    "os": "ubuntu",
                    "version": "20.04",
                    "memory": "4GB"
                },
                user_requirements="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º",
                constraints=["–ù–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Let's Encrypt"],
                available_tools=["apt", "systemctl", "certbot", "nginx"],
                previous_tasks=[],
                environment={"domain": "example.com", "production": True}
            )
            
            complex_task = "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å nginx —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –æ—Ç Let's Encrypt"
            result = task_agent.plan_task(complex_task, context)
            
            if result.success:
                print(f"‚úÖ –°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {result.task.title}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(result.task.steps)}")
                if result.task.total_estimated_duration:
                    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {result.task.total_estimated_duration} –º–∏–Ω")
                
                print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:")
                for i, step in enumerate(result.task.steps, 1):
                    print(f"  {i}. {step.title}")
                    print(f"     üìù {step.description}")
                    print(f"     üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {step.priority.value}")
                    if step.estimated_duration:
                        print(f"     ‚è∞ –í—Ä–µ–º—è: {step.estimated_duration} –º–∏–Ω")
                    if step.dependencies:
                        print(f"     üîó –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(step.dependencies)}")
                    print()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = result.task.get_progress()
                print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['progress_percentage']:.1f}% "
                      f"({progress['completed_steps']}/{progress['total_steps']} —à–∞–≥–æ–≤)")
            
            # –ü—Ä–∏–º–µ—Ä 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            print("\n--- –ü—Ä–∏–º–µ—Ä 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞ ---")
            
            from src.models.planning_model import Task, TaskStep, StepStatus
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
            problematic_task = Task(title="–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –∑–∞–¥–∞—á–∞", description="–ó–∞–¥–∞—á–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            step1 = TaskStep(title="–®–∞–≥ 1", step_id="step_1", dependencies=["step_2"])
            step2 = TaskStep(title="–®–∞–≥ 2", step_id="step_2", dependencies=["step_1"])
            
            problematic_task.add_step(step1)
            problematic_task.add_step(step2)
            
            validation_result = task_agent._validate_plan(problematic_task)
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'‚úÖ –í–∞–ª–∏–¥–µ–Ω' if validation_result['valid'] else '‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω'}")
            if not validation_result['valid']:
                print("üö® –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in validation_result['issues']:
                    print(f"   - {issue}")
            
            # –ü—Ä–∏–º–µ—Ä 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–æ–≤
            print("\n--- –ü—Ä–∏–º–µ—Ä 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º ---")
            
            if result.success and result.task.steps:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                first_step = result.task.steps[0]
                print(f"üìã –®–∞–≥: {first_step.title}")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {first_step.status.value}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                task_agent.update_step_status(result.task, first_step.step_id, StepStatus.EXECUTING)
                print(f"üîÑ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {first_step.status.value}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                task_status = task_agent.get_task_status(result.task)
                print(f"üìà –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_status['status']}")
            
            print("\n=== –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
