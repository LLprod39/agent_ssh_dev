#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google Gemini —Å –Ω–æ–≤—ã–º API
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from config.agent_config import LLMConfig
from models.llm_interface import LLMInterfaceFactory, LLMRequest
from utils.logger import StructuredLogger


def test_gemini_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API Gemini"""
    print("=== –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–≥–æ API Gemini ===")
    
    try:
        from google import genai
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
        os.environ['GEMINI_API_KEY'] = "AIzaSyDGBAljOf_M5vZr8FhICnoH6w8ij4a87OQ"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = genai.Client()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        response = client.models.generate_content(
            model="gemini-2.5-flash", 
            contents="–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
        )
        
        print(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini: {response.text}")
        print("‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä—è–º–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()


def test_gemini_interface():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("\n=== –¢–µ—Å—Ç —á–µ—Ä–µ–∑ GeminiInterface ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = LLMConfig(
            api_key="AIzaSyDGBAljOf_M5vZr8FhICnoH6w8ij4a87OQ",
            model="gemini-2.5-flash",
            provider="gemini",
            max_tokens=1000,
            temperature=0.7,
            timeout=60
        )
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = StructuredLogger("GeminiTest")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        llm_interface = LLMInterfaceFactory.create_interface(config, logger)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if not llm_interface.is_available():
            print("‚ùå Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        print("‚úÖ Gemini API –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        request = LLMRequest(
            prompt="–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker –Ω–∞ Ubuntu",
            model="gemini-2.5-flash",
            temperature=0.3,
            max_tokens=500,
            system_message="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ DevOps. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        )
        
        response = llm_interface.generate_response(request)
        
        if response.success:
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini:")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {response.duration:.2f} —Å–µ–∫")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {response.usage}")
            print("\n" + "="*50)
            print("–û–¢–í–ï–¢ –û–¢ GEMINI:")
            print("="*50)
            print(response.content)
            print("="*50)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {response.error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        import traceback
        traceback.print_exc()


def test_task_planning():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    print("\n=== –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = LLMConfig(
            api_key="AIzaSyDGBAljOf_M5vZr8FhICnoH6w8ij4a87OQ",
            model="gemini-2.5-flash",
            provider="gemini",
            max_tokens=2000,
            temperature=0.3,
            timeout=60
        )
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = StructuredLogger("TaskPlanningTest")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        llm_interface = LLMInterfaceFactory.create_interface(config, logger)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        request = LLMRequest(
            prompt="""
            –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Nginx –Ω–∞ Ubuntu 22.04.
            –í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:
            1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Nginx
            3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL
            5. –ó–∞–ø—É—Å–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
            
            –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: title, description, steps (–º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏).
            """,
            model="gemini-2.5-flash",
            temperature=0.3,
            max_tokens=2000,
            system_message="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é Linux. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
        )
        
        response = llm_interface.generate_response(request)
        
        if response.success:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {response.duration:.2f} —Å–µ–∫")
            print("\n" + "="*50)
            print("–ü–õ–ê–ù –ó–ê–î–ê–ß–ò:")
            print("="*50)
            print(response.content)
            print("="*50)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {response.error}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Gemini —Å –Ω–æ–≤—ã–º API")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API
    test_gemini_direct()
    
    # –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    test_gemini_interface()
    
    # –¢–µ—Å—Ç 3: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
    test_task_planning()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main()
