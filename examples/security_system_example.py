#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –®–∞–≥ 5.1

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ü—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –í–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent.parent))

from src.utils.validator import CommandValidator
from src.config.agent_config import SecurityConfig
from src.utils.logger import StructuredLogger


def test_command_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""
    print("=== –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_config = {
        'validate_commands': True,
        'log_forbidden_attempts': True,
        'require_confirmation_for_dangerous': True,
        'allowed_commands_only': False
    }
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥
    validator = CommandValidator(security_config=security_config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    test_commands = [
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "ls -la",
        "pwd",
        "whoami",
        "cat /etc/passwd",
        "sudo apt update",
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "chmod 777 /tmp",
        "sudo systemctl restart nginx",
        "dd if=/dev/zero of=/tmp/test bs=1M count=1",
        
        # –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        "rm -rf /",
        "dd if=/dev/zero of=/dev/sda",
        "shutdown now",
        ":(){ :|:& };:",  # fork bomb
        "mkfs.ext4 /dev/sda1",
    ]
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:")
    print("=" * 60)
    
    for command in test_commands:
        print(f"\n–ö–æ–º–∞–Ω–¥–∞: {command}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        result = validator.validate_command(command, context={
            'step_id': 'test_step',
            'task_id': 'test_task'
        })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê" if result['valid'] else "‚ùå –ó–ê–ü–†–ï–©–ï–ù–ê"
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        print(f"–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {result['security_level']}")
        
        if result['errors']:
            print(f"–û—à–∏–±–∫–∏: {', '.join(result['errors'])}")
        
        if result['warnings']:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {', '.join(result['warnings'])}")
        
        if result['requires_confirmation']:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n{'='*60}")
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    stats = validator.get_validation_stats()
    for key, value in stats.items():
        print(f"  {key}: {value}")


def test_forbidden_patterns():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===\n")
    
    validator = CommandValidator()
    
    # –ö–æ–º–∞–Ω–¥—ã —Å –æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    dangerous_commands = [
        "rm -rf /var/log/*",
        "dd if=/dev/random of=/dev/sda bs=1M",
        "mkfs.ext4 /dev/sdb1",
        "fdisk /dev/sda",
        "wipefs -a /dev/sdb",
        "shutdown -h now",
        "reboot",
        "chmod 777 /",
        "chown root:root /home/user",
        "crontab -r",
        "nohup yes > /dev/null 2>&1 &"
    ]
    
    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    print("=" * 50)
    
    for command in dangerous_commands:
        result = validator.validate_command(command)
        print(f"\n–ö–æ–º–∞–Ω–¥–∞: {command}")
        
        if result['warnings']:
            print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for warning in result['warnings']:
                print(f"   - {warning}")
        else:
            print("‚úÖ –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")


def test_security_levels():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===\n")
    
    # –¢–µ—Å—Ç —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º
    allowed_commands = ["ls", "pwd", "whoami", "cat", "echo"]
    
    validator_whitelist = CommandValidator(
        allowed_commands=allowed_commands,
        security_config={'allowed_commands_only': True}
    )
    
    test_commands = [
        "ls -la",           # —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        "pwd",              # —Ä–∞–∑—Ä–µ—à–µ–Ω–∞  
        "rm file.txt",      # –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        "cat /etc/passwd",  # —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        "sudo apt update"   # –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    ]
    
    print("–¢–µ—Å—Ç —Å –±–µ–ª—ã–º —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥:")
    print("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", ", ".join(allowed_commands))
    print("=" * 50)
    
    for command in test_commands:
        result = validator_whitelist.validate_command(command)
        status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê" if result['valid'] else "‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê"
        print(f"{command:<20} - {status}")


def test_dynamic_management():
    """–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ===\n")
    
    validator = CommandValidator()
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", len(validator.forbidden_commands))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    new_forbidden = "dangerous_custom_command"
    validator.add_forbidden_command(new_forbidden)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {new_forbidden}")
    print("–í—Å–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:", len(validator.forbidden_commands))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    result = validator.validate_command(new_forbidden)
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è '{new_forbidden}': {'‚ùå –ó–ê–ü–†–ï–©–ï–ù–ê' if not result['valid'] else '‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê'}")
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    validator.remove_forbidden_command(new_forbidden)
    print(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {new_forbidden}")
    print("–í—Å–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:", len(validator.forbidden_commands))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–Ω–æ–≤–∞
    result = validator.validate_command(new_forbidden)
    print(f"–í–∞–ª–∏–¥–∞—Ü–∏—è '{new_forbidden}': {'‚ùå –ó–ê–ü–†–ï–©–ï–ù–ê' if not result['valid'] else '‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê'}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    new_pattern = r"custom_dangerous_.*"
    validator.add_dangerous_pattern(new_pattern)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {new_pattern}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
    result = validator.validate_command("custom_dangerous_operation")
    if result['warnings']:
        print("üö® –ù–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω!")
    else:
        print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")


def test_integration_with_logger():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    security_config = {
        'validate_commands': True,
        'log_forbidden_attempts': True
    }
    
    validator = CommandValidator(security_config=security_config)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    forbidden_commands = [
        "rm -rf /",
        "shutdown now",
        "dd if=/dev/zero of=/dev/sda"
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:")
    print("=" * 50)
    
    for command in forbidden_commands:
        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {command}")
        
        context = {
            'step_id': 'security_test_step',
            'task_id': 'security_test_task',
            'user': 'test_user',
            'timestamp': 'test_timestamp'
        }
        
        result = validator.validate_command(command, context)
        
        if not result['valid']:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ª–æ–≥")
        else:
            print("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞!")


def demo_security_stats():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===\n")
    
    validator = CommandValidator()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    commands = [
        "ls -la",           # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è
        "sudo apt update",  # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è
        "rm file.txt",      # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è
        "chmod 777 /tmp",   # –æ–ø–∞—Å–Ω–∞—è
        "rm -rf /",         # –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è
        "shutdown",         # –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è
        "dd if=/dev/zero",  # –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è
    ]
    
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    for command in commands:
        result = validator.validate_command(command)
        status = "‚úÖ" if result['valid'] else "‚ùå"
        level = result['security_level']
        print(f"{status} {command:<25} ({level})")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n{'='*50}")
    print("–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    stats = validator.get_validation_stats()
    
    for key, value in stats.items():
        formatted_key = key.replace('_', ' ').title()
        print(f"  {formatted_key}: {value}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n{'='*50}")
    print("–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    validator.reset_stats()
    
    stats_after_reset = validator.get_validation_stats()
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:")
    for key, value in stats_after_reset.items():
        formatted_key = key.replace('_', ' ').title()
        print(f"  {formatted_key}: {value}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîí –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò - –®–ê–ì 5.1")
    print("=" * 80)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_command_validation()
        test_forbidden_patterns()
        test_security_levels()
        test_dynamic_management()
        test_integration_with_logger()
        demo_security_stats()
        
        print("\n" + "=" * 80)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        
        print("\nüìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
        print("  ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        print("  ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        print("  ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        print("  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("  ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–æ–º")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
