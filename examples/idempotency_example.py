"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
- –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
- –°–∏—Å—Ç–µ–º—É –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.config.agent_config import AgentConfig
from src.connectors.ssh_connector import SSHConnector, ServerConfig
from src.utils.idempotency_system import IdempotencySystem, IdempotencyCheck, IdempotencyCheckType
from src.agents.subtask_agent import SubtaskAgent, Subtask
from src.models.execution_model import ExecutionModel
from src.utils.logger import StructuredLogger


def create_mock_ssh_connector():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    class MockSSHConnector:
        def __init__(self):
            self.connected = True
            self.commands_executed = []
        
        def execute_command(self, command: str, timeout: int = 30, context: dict = None):
            """–ú–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
            self.commands_executed.append(command)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
            if "dpkg -l" in command and "nginx" in command:
                # –ü–∞–∫–µ—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': 'ii  nginx  1.18.0-0ubuntu1.4  amd64  high performance web server',
                    'stderr': '',
                    'duration': 0.1
                })()
            elif "test -f" in command and "/etc/nginx/nginx.conf" in command:
                # –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': '',
                    'stderr': '',
                    'duration': 0.05
                })()
            elif "systemctl is-active" in command and "nginx" in command:
                # –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': '',
                    'stderr': '',
                    'duration': 0.1
                })()
            elif "apt-get install" in command:
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': 'Setting up nginx (1.18.0-0ubuntu1.4) ...',
                    'stderr': '',
                    'duration': 2.5
                })()
            elif "systemctl start" in command:
                # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': '',
                    'stderr': '',
                    'duration': 0.3
                })()
            else:
                # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                return type('Result', (), {
                    'success': True,
                    'exit_code': 0,
                    'stdout': f'Mock output for: {command}',
                    'stderr': '',
                    'duration': 0.1
                })()
        
        def is_command_safe(self, command: str) -> bool:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
            dangerous_commands = ['rm -rf /', 'dd if=/dev/zero', 'mkfs']
            return not any(dangerous in command for dangerous in dangerous_commands)
    
    return MockSSHConnector()


def demonstrate_idempotency_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    ssh_connector = create_mock_ssh_connector()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = AgentConfig(
        llm={
            "api_key": "mock-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4"
        }
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    idempotency_system = IdempotencySystem(ssh_connector, config.idempotency.dict())
    
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    print("-" * 30)
    
    # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    snapshot = idempotency_system.create_state_snapshot("demo_task_001")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–Ω–∏–º–æ–∫: {snapshot.snapshot_id}")
    print(f"   –í—Ä–µ–º—è: {snapshot.timestamp}")
    print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ: {len(snapshot.system_info)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    print("\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
    print("-" * 30)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    commands_to_test = [
        ("apt-get install nginx", "install_package", "nginx"),
        ("touch /etc/nginx/nginx.conf", "create_file", "/etc/nginx/nginx.conf"),
        ("mkdir -p /var/www/html", "create_directory", "/var/www/html"),
        ("systemctl start nginx", "start_service", "nginx"),
        ("systemctl enable nginx", "enable_service", "nginx"),
    ]
    
    for base_command, command_type, target in commands_to_test:
        print(f"\n–ö–æ–º–∞–Ω–¥–∞: {base_command}")
        idempotent_cmd, checks = idempotency_system.generate_idempotent_command(
            base_command, command_type, target
        )
        print(f"–ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è: {idempotent_cmd}")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∏: {len(checks)} —à—Ç.")
        for check in checks:
            print(f"  - {check.description}")
    
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("-" * 30)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        IdempotencyCheck(
            check_type=IdempotencyCheckType.PACKAGE_INSTALLED,
            target="nginx",
            expected_state=True,
            check_command="dpkg -l | grep -q '^ii  nginx'",
            success_pattern=".*",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ nginx"
        ),
        IdempotencyCheck(
            check_type=IdempotencyCheckType.FILE_EXISTS,
            target="/etc/nginx/nginx.conf",
            expected_state=True,
            check_command="test -f /etc/nginx/nginx.conf",
            success_pattern=".*",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ nginx"
        ),
        IdempotencyCheck(
            check_type=IdempotencyCheckType.SERVICE_RUNNING,
            target="nginx",
            expected_state=True,
            check_command="systemctl is-active --quiet nginx",
            success_pattern=".*",
            description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ nginx"
        )
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = idempotency_system.check_idempotency(checks)
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:")
    for result in results:
        status = "‚úÖ –£–°–ü–ï–•" if result.success else "‚ùå –ù–ï–£–î–ê–ß–ê"
        print(f"  {status} {result.check.description}")
        if result.current_state:
            print(f"    –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result.current_state}")
        if result.error_message:
            print(f"    –û—à–∏–±–∫–∞: {result.error_message}")
    
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    test_commands = [
        "apt-get install nginx",
        "systemctl start nginx",
        "touch /tmp/test_file"
    ]
    
    for command in test_commands:
        should_skip = idempotency_system.should_skip_command(command, checks)
        status = "–ü–†–û–ü–£–°–¢–ò–¢–¨" if should_skip else "–í–´–ü–û–õ–ù–ò–¢–¨"
        print(f"  {command} -> {status}")
    
    print("\n5. –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–∞—Ç–∞")
    print("-" * 30)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–Ω–∏–º–æ–∫ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    snapshot.packages_installed = ["nginx"]
    snapshot.services_started = ["nginx"]
    snapshot.files_created = ["/etc/nginx/nginx.conf"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–∞—Ç–∞
    rollback_commands = idempotency_system.create_rollback_commands(snapshot)
    print(f"–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥ –æ—Ç–∫–∞—Ç–∞: {len(rollback_commands)}")
    for cmd in rollback_commands:
        print(f"  - {cmd}")
    
    print("\n6. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("-" * 30)
    
    status = idempotency_system.get_system_status()
    print(f"–°–Ω–∏–º–∫–æ–≤: {status['snapshots_count']}")
    print(f"–¢–µ–∫—É—â–∏–π —Å–Ω–∏–º–æ–∫: {status['current_snapshot']}")
    print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {status['cache_size']}")
    print(f"TTL –∫—ç—à–∞: {status['cache_ttl']} —Å–µ–∫")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


def demonstrate_subtask_agent_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SubtaskAgent"""
    print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SubtaskAgent")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    ssh_connector = create_mock_ssh_connector()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = AgentConfig(
        llm={
            "api_key": "mock-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4"
        }
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SubtaskAgent —Å —Å–∏—Å—Ç–µ–º–æ–π –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    subtask_agent = SubtaskAgent(config, ssh_connector=ssh_connector)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–∑–∞–¥–∞—á—É
    subtask = Subtask(
        subtask_id="test_subtask_001",
        title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ nginx",
        description="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ nginx –∏ –µ–≥–æ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
        commands=[
            "apt-get update",
            "apt-get install nginx",
            "systemctl start nginx",
            "systemctl enable nginx",
            "touch /etc/nginx/nginx.conf"
        ],
        health_checks=[
            "systemctl is-active nginx",
            "nginx -t"
        ],
        expected_output="Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω",
        rollback_commands=[
            "systemctl stop nginx",
            "apt-get remove nginx"
        ]
    )
    
    print("–ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞:")
    print(f"  –ö–æ–º–∞–Ω–¥: {len(subtask.commands)}")
    for i, cmd in enumerate(subtask.commands, 1):
        print(f"    {i}. {cmd}")
    
    # –£–ª—É—á—à–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
    enhanced_subtask = subtask_agent.enhance_subtask_with_idempotency(subtask)
    
    print("\n–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∞:")
    print(f"  –ö–æ–º–∞–Ω–¥: {len(enhanced_subtask.commands)}")
    for i, cmd in enumerate(enhanced_subtask.commands, 1):
        print(f"    {i}. {cmd}")
    
    print(f"\n–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
    print(f"  –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {enhanced_subtask.metadata.get('idempotent_enhanced', False)}")
    print(f"  –ü—Ä–æ–≤–µ—Ä–æ–∫: {len(enhanced_subtask.metadata.get('idempotency_checks', []))}")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SubtaskAgent –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")


def demonstrate_execution_model_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ExecutionModel"""
    print("\n‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ExecutionModel")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ SSH –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    ssh_connector = create_mock_ssh_connector()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = AgentConfig(
        llm={
            "api_key": "mock-key",
            "base_url": "https://api.openai.com/v1",
            "model": "gpt-4"
        }
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ExecutionModel
    execution_model = ExecutionModel(config, ssh_connector)
    
    print("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:")
    status = execution_model.get_idempotency_status()
    for key, value in status.items():
        print(f"  {key}: {value}")
    
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    snapshot = execution_model.create_idempotency_snapshot("demo_execution_001")
    print(f"  –°–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–Ω: {snapshot.snapshot_id}")
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:")
    cmd, checks = execution_model.generate_idempotent_command(
        "apt-get install nginx", "install_package", "nginx"
    )
    print(f"  –ò—Å—Ö–æ–¥–Ω–∞—è: apt-get install nginx")
    print(f"  –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è: {cmd}")
    print(f"  –ü—Ä–æ–≤–µ—Ä–æ–∫: {len(checks)}")
    
    print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ExecutionModel –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")


if __name__ == "__main__":
    print("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        demonstrate_idempotency_system()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SubtaskAgent
        demonstrate_subtask_agent_integration()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ExecutionModel
        demonstrate_execution_model_integration()
        
        print("\nüéâ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
