#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
"""

import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
from src.utils.error_tracker import ErrorTracker, EscalationLevel, ErrorSeverity


def simulate_command_execution(command: str, should_fail: bool = False):
    """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    
    if should_fail:
        return {
            "command": command,
            "success": False,
            "exit_code": 1,
            "stdout": "",
            "stderr": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}",
            "duration": 0.1,
            "error_message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}"
        }
    else:
        return {
            "command": command,
            "success": True,
            "exit_code": 0,
            "stdout": f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "stderr": "",
            "duration": 0.1,
            "error_message": None
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("=== –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫
    error_tracker = ErrorTracker(
        error_threshold=3,  # –ü–æ—Ä–æ–≥ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
        escalation_threshold=5,  # –ü–æ—Ä–æ–≥ –¥–ª—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É
        max_retention_days=7
    )
    
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫")
    print(f"   - –ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {error_tracker.error_threshold}")
    print(f"   - –ü–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞: {error_tracker.escalation_threshold}")
    print(f"   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: {error_tracker.max_retention_days} –¥–Ω–µ–π\n")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —à–∞–≥–æ–≤
    step_ids = ["step_1", "step_2", "step_3"]
    commands = [
        "sudo apt update",
        "sudo apt install nginx",
        "systemctl start nginx"
    ]
    
    print("2. –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥")
    
    # –®–∞–≥ 1: –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    print("\n--- –®–∞–≥ 1: –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---")
    for i, (step_id, command) in enumerate(zip(step_ids, commands)):
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        result = simulate_command_execution(command, should_fail=False)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        attempt_id = error_tracker.record_attempt(
            step_id=step_id,
            command=command,
            success=result["success"],
            duration=result["duration"],
            exit_code=result["exit_code"],
            error_message=result["error_message"],
            autocorrection_used=False,
            metadata={"command_type": "main_command"}
        )
        
        print(f"  ‚úì –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ID: {attempt_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —à–∞–≥–∞
        stats = error_tracker.get_step_stats(step_id)
        if stats:
            print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.successful_attempts}/{stats.total_attempts} —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    # –®–∞–≥ 2: –ù–µ—É–¥–∞—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    print("\n--- –®–∞–≥ 2: –ù–µ—É–¥–∞—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏) ---")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è step_1
    failed_commands = [
        "sudo apt install nonexistent-package",
        "systemctl start nonexistent-service",
        "curl http://nonexistent-url.com"
    ]
    
    for i, command in enumerate(failed_commands):
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        result = simulate_command_execution(command, should_fail=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        attempt_id = error_tracker.record_attempt(
            step_id="step_1",
            command=command,
            success=result["success"],
            duration=result["duration"],
            exit_code=result["exit_code"],
            error_message=result["error_message"],
            autocorrection_used=False,
            metadata={"command_type": "main_command"}
        )
        
        print(f"  ‚úó –ù–µ—É–¥–∞—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ ID: {attempt_id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        escalation_level = error_tracker.get_escalation_level("step_1")
        print(f"  –£—Ä–æ–≤–µ–Ω—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {escalation_level.value}")
        
        if escalation_level == EscalationLevel.PLANNER_NOTIFICATION:
            print("  ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø –ö –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–£!")
        elif escalation_level == EscalationLevel.HUMAN_ESCALATION:
            print("  üö® –¢–†–ï–ë–£–ï–¢–°–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø –ö –ß–ï–õ–û–í–ï–ö–£!")
    
    # –®–∞–≥ 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    print("\n--- –®–∞–≥ 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ ---")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é
    original_command = "sudo apt install nginx"
    corrected_command = "sudo apt update && sudo apt install nginx"
    
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {original_command}")
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {corrected_command}")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    error_tracker.record_attempt(
        step_id="step_2",
        command=original_command,
        success=False,
        duration=0.1,
        exit_code=1,
        error_message="Package not found",
        autocorrection_used=False,
        metadata={"command_type": "main_command"}
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    error_tracker.record_attempt(
        step_id="step_2",
        command=corrected_command,
        success=True,
        duration=0.2,
        exit_code=0,
        autocorrection_used=True,
        metadata={
            "command_type": "autocorrected_command",
            "original_command": original_command
        }
    )
    
    print("  ‚úì –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\n--- –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---")
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    global_stats = error_tracker.get_global_stats()
    print("–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {global_stats['total_attempts']}")
    print(f"  - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {global_stats['total_errors']}")
    print(f"  - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {global_stats['success_rate']:.1f}%")
    print(f"  - –≠—Å–∫–∞–ª–∞—Ü–∏–π –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É: {global_stats['escalations_to_planner']}")
    print(f"  - –≠—Å–∫–∞–ª–∞—Ü–∏–π –∫ —á–µ–ª–æ–≤–µ–∫—É: {global_stats['escalations_to_human']}")
    print(f"  - –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {global_stats['autocorrections_applied']}")
    print(f"  - –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–π —É—Å–ø–µ—à–Ω–æ: {global_stats['autocorrections_successful']}")
    print(f"  - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {global_stats['autocorrection_success_rate']:.1f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–≥–∞–º
    print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–≥–∞–º:")
    for step_id in step_ids:
        summary = error_tracker.get_error_summary(step_id)
        print(f"  {step_id}:")
        print(f"    - –ü–æ–ø—ã—Ç–æ–∫: {summary['attempt_count']}")
        print(f"    - –û—à–∏–±–æ–∫: {summary['error_count']}")
        print(f"    - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        print(f"    - –£—Ä–æ–≤–µ–Ω—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {summary['escalation_level']}")
        
        if summary['error_patterns']:
            print(f"    - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫: {summary['error_patterns']}")
    
    # –®–∞–≥ 5: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    print("\n--- –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π ---")
    
    print("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
    error_tracker.cleanup_old_records()
    print("‚úì –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_stats = error_tracker.get_global_stats()
    print(f"–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {final_stats['total_error_records']} –æ—à–∏–±–æ–∫, {final_stats['total_attempt_records']} –ø–æ–ø—ã—Ç–æ–∫")
    
    print("\n=== –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ===")


if __name__ == "__main__":
    main()

