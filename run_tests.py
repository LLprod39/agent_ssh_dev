#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ SSH Agent

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
- unit: Unit —Ç–µ—Å—Ç—ã
- integration: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
- error_scenarios: –¢–µ—Å—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫
- all: –í—Å–µ —Ç–µ—Å—Ç—ã
- coverage: –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
"""

import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"–ó–∞–ø—É—Å–∫: {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(command, check=True, capture_output=False)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {e.returncode})")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SSH Agent")
    parser.add_argument(
        "test_type",
        choices=["unit", "integration", "error_scenarios", "all", "coverage"],
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    parser.add_argument(
        "--parallel", "-p",
        action="store_true",
        help="–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    )
    parser.add_argument(
        "--stop-on-first-failure", "-x",
        action="store_true",
        help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ"
    )
    
    args = parser.parse_args()
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ pytest
    base_options = ["-v" if args.verbose else "-q"]
    
    if args.stop_on_first_failure:
        base_options.append("-x")
    
    if args.parallel:
        base_options.extend(["-n", "auto"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
    commands = {
        "unit": ["python", "-m", "pytest"] + base_options + [
            "-m", "unit",
            "tests/test_agents/",
            "tests/test_connectors/",
            "tests/test_models/",
            "tests/test_utils/"
        ],
        
        "integration": ["python", "-m", "pytest"] + base_options + [
            "-m", "integration",
            "tests/test_integration/"
        ],
        
        "error_scenarios": ["python", "-m", "pytest"] + base_options + [
            "-m", "error_scenarios",
            "tests/test_error_scenarios/"
        ],
        
        "all": ["python", "-m", "pytest"] + base_options + [
            "tests/"
        ],
        
        "coverage": ["python", "-m", "pytest"] + base_options + [
            "--cov=src",
            "--cov-report=term-missing",
            "--cov-report=html:htmlcov",
            "--cov-report=xml",
            "--cov-fail-under=80",
            "tests/"
        ]
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    command = commands[args.test_type]
    success = run_command(command, f"–¢–µ—Å—Ç—ã —Ç–∏–ø–∞: {args.test_type}")
    
    if success:
        print(f"\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ç–∏–ø–∞ '{args.test_type}' –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.test_type == "coverage":
            print("\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞:")
            print("- HTML –æ—Ç—á–µ—Ç: htmlcov/index.html")
            print("- XML –æ—Ç—á–µ—Ç: coverage.xml")
    else:
        print(f"\nüí• –¢–µ—Å—Ç—ã —Ç–∏–ø–∞ '{args.test_type}' –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()
