#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ SSH Agent
"""
import sys
import subprocess
import argparse
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command}")
    print("-" * 60)
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=False)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {e.returncode})")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ SSH Agent")
    parser.add_argument("--unit", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã")
    parser.add_argument("--integration", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    parser.add_argument("--coverage", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--parallel", "-n", type=int, default=4, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    parser.add_argument("--pattern", "-k", help="–§–∏–ª—å—Ç—Ä —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    parser.add_argument("--file", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É pytest
    base_cmd = "python -m pytest"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if args.verbose:
        base_cmd += " -v"
    
    if args.coverage:
        base_cmd += " --cov=src --cov-report=html --cov-report=term"
    
    if args.parallel > 1:
        base_cmd += f" -n {args.parallel}"
    
    if args.pattern:
        base_cmd += f" -k '{args.pattern}'"
    
    if args.file:
        base_cmd += f" {args.file}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    test_commands = []
    
    if args.unit or not (args.unit or args.integration):
        # Unit —Ç–µ—Å—Ç—ã
        unit_tests = [
            "tests/test_agents/",
            "tests/test_connectors/",
            "tests/test_models/",
            "tests/test_utils/"
        ]
        
        for test_dir in unit_tests:
            if Path(test_dir).exists():
                test_commands.append((f"{base_cmd} {test_dir}", f"Unit —Ç–µ—Å—Ç—ã: {test_dir}"))
    
    if args.integration or not (args.unit or args.integration):
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        integration_tests = [
            "tests/test_integration/"
        ]
        
        for test_dir in integration_tests:
            if Path(test_dir).exists():
                test_commands.append((f"{base_cmd} {test_dir}", f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã: {test_dir}"))
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
    if args.file:
        test_commands = [(f"{base_cmd} {args.file}", f"–¢–µ—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞: {args.file}")]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í SSH AGENT")
    print("=" * 60)
    
    success_count = 0
    total_count = len(test_commands)
    
    for command, description in test_commands:
        if run_command(command, description):
            success_count += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*60}")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥—Ä—É–ø–ø: {total_count}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–° –æ—à–∏–±–∫–∞–º–∏: {total_count - success_count}")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
        return 1


if __name__ == "__main__":
    sys.exit(main())
