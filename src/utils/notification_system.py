"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
- –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (email, webhook, –∫–æ–Ω—Å–æ–ª—å, —Ñ–∞–π–ª)
- –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import time
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, Optional, List, Union, Callable
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
import logging
from pathlib import Path

from ..utils.logger import StructuredLogger


class NotificationChannel(Enum):
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    EMAIL = "email"
    WEBHOOK = "webhook"
    CONSOLE = "console"
    FILE = "file"
    LOG = "log"


class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class NotificationType(Enum):
    """–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    TASK_STARTED = "task_started"
    TASK_PROGRESS = "task_progress"
    TASK_COMPLETED = "task_completed"
    TASK_FAILED = "task_failed"
    STEP_STARTED = "step_started"
    STEP_COMPLETED = "step_completed"
    STEP_FAILED = "step_failed"
    ERROR_ESCALATION = "error_escalation"
    HUMAN_ESCALATION = "human_escalation"
    SYSTEM_STATUS = "system_status"
    AUTOCORRECTION = "autocorrection"


@dataclass
class Notification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    notification_id: str
    notification_type: NotificationType
    priority: NotificationPriority
    title: str
    message: str
    timestamp: datetime
    channels: List[NotificationChannel]
    task_id: Optional[str] = None
    step_id: Optional[str] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    sent: bool = False
    sent_at: Optional[datetime] = None
    delivery_status: Dict[str, str] = field(default_factory=dict)  # channel -> status
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "notification_id": self.notification_id,
            "notification_type": self.notification_type.value,
            "priority": self.priority.value,
            "title": self.title,
            "message": self.message,
            "timestamp": self.timestamp.isoformat(),
            "channels": [channel.value for channel in self.channels],
            "task_id": self.task_id,
            "step_id": self.step_id,
            "metadata": self.metadata,
            "sent": self.sent,
            "sent_at": self.sent_at.isoformat() if self.sent_at else None,
            "delivery_status": self.delivery_status
        }


@dataclass
class NotificationTemplate:
    """–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    
    template_id: str
    notification_type: NotificationType
    priority: NotificationPriority
    title_template: str
    message_template: str
    channels: List[NotificationChannel]
    enabled: bool = True
    conditions: Dict[str, Any] = field(default_factory=dict)  # –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    def render(self, context: Dict[str, Any]) -> tuple:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        title = self.title_template.format(**context)
        message = self.message_template.format(**context)
        return title, message


class NotificationSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.config = config
        self.logger = StructuredLogger("NotificationSystem")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications: Dict[str, Notification] = {}
        self.templates: Dict[str, NotificationTemplate] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
        self.channel_configs = {
            NotificationChannel.EMAIL: config.get("email", {}),
            NotificationChannel.WEBHOOK: config.get("webhook", {}),
            NotificationChannel.CONSOLE: config.get("console", {}),
            NotificationChannel.FILE: config.get("file", {}),
            NotificationChannel.LOG: config.get("log", {})
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        self._initialize_templates()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "notifications_sent": 0,
            "notifications_failed": 0,
            "notifications_by_type": {},
            "notifications_by_priority": {},
            "notifications_by_channel": {}
        }
        
        self.logger.info(
            "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
            channels_enabled=[channel.value for channel, config in self.channel_configs.items() if config.get("enabled", False)],
            templates_loaded=len(self.templates)
        )
    
    def _initialize_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        templates = [
            # –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞–ª–∞—Å—å
            NotificationTemplate(
                template_id="task_started",
                notification_type=NotificationType.TASK_STARTED,
                priority=NotificationPriority.MEDIUM,
                title_template="üöÄ –ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞: {task_title}",
                message_template=(
                    "–ó–∞–¥–∞—á–∞ '{task_title}' –Ω–∞—á–∞—Ç–∞.\n"
                    "ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ: {task_description}\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {total_steps}\n"
                    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}\n"
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG]
            ),
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏
            NotificationTemplate(
                template_id="task_progress",
                notification_type=NotificationType.TASK_PROGRESS,
                priority=NotificationPriority.LOW,
                title_template="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏: {task_title}",
                message_template=(
                    "–ó–∞–¥–∞—á–∞ '{task_title}' - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed_steps}/{total_steps}\n"
                    "–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percentage:.1f}%\n"
                    "–¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step_title}\n"
                    "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time}"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG],
                conditions={"progress_interval": 25}  # –ö–∞–∂–¥—ã–µ 25%
            ),
            
            # –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            NotificationTemplate(
                template_id="task_completed",
                notification_type=NotificationType.TASK_COMPLETED,
                priority=NotificationPriority.HIGH,
                title_template="‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_title}",
                message_template=(
                    "–ó–∞–¥–∞—á–∞ '{task_title}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    "ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                    "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration}\n"
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed_steps}/{total_steps}\n"
                    "–û—à–∏–±–æ–∫: {error_count}\n"
                    "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_time}"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG, NotificationChannel.EMAIL]
            ),
            
            # –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞
            NotificationTemplate(
                template_id="task_failed",
                notification_type=NotificationType.TASK_FAILED,
                priority=NotificationPriority.CRITICAL,
                title_template="‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {task_title}",
                message_template=(
                    "–ó–∞–¥–∞—á–∞ '{task_title}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!\n"
                    "ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                    "–ü—Ä–∏—á–∏–Ω–∞: {failure_reason}\n"
                    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed_steps}/{total_steps}\n"
                    "–û—à–∏–±–æ–∫: {error_count}\n"
                    "–í—Ä–µ–º—è –ø—Ä–æ–≤–∞–ª–∞: {failure_time}\n"
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG, NotificationChannel.EMAIL, NotificationChannel.WEBHOOK]
            ),
            
            # –®–∞–≥ –Ω–∞—á–∞–ª—Å—è
            NotificationTemplate(
                template_id="step_started",
                notification_type=NotificationType.STEP_STARTED,
                priority=NotificationPriority.LOW,
                title_template="üîÑ –®–∞–≥ –Ω–∞—á–∞—Ç: {step_title}",
                message_template=(
                    "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —à–∞–≥ '{step_title}' –∑–∞–¥–∞—á–∏ '{task_title}'.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ: {step_description}\n"
                    "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}"
                ),
                channels=[NotificationChannel.LOG]
            ),
            
            # –®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
            NotificationTemplate(
                template_id="step_completed",
                notification_type=NotificationType.STEP_COMPLETED,
                priority=NotificationPriority.LOW,
                title_template="‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {step_title}",
                message_template=(
                    "–®–∞–≥ '{step_title}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}\n"
                    "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_time}"
                ),
                channels=[NotificationChannel.LOG]
            ),
            
            # –®–∞–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω
            NotificationTemplate(
                template_id="step_failed",
                notification_type=NotificationType.STEP_FAILED,
                priority=NotificationPriority.MEDIUM,
                title_template="‚ö†Ô∏è –®–∞–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω: {step_title}",
                message_template=(
                    "–®–∞–≥ '{step_title}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "–û—à–∏–±–∫–∞: {error_message}\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {retry_count}\n"
                    "–í—Ä–µ–º—è –ø—Ä–æ–≤–∞–ª–∞: {failure_time}\n"
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è: {autocorrection_applied}"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG]
            ),
            
            # –≠—Å–∫–∞–ª–∞—Ü–∏—è –æ—à–∏–±–æ–∫
            NotificationTemplate(
                template_id="error_escalation",
                notification_type=NotificationType.ERROR_ESCALATION,
                priority=NotificationPriority.HIGH,
                title_template="üö® –≠—Å–∫–∞–ª–∞—Ü–∏—è –æ—à–∏–±–æ–∫: {step_title}",
                message_template=(
                    "–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞ '{step_title}'.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error_count}\n"
                    "–ü–æ—Ä–æ–≥: {error_threshold}\n"
                    "–ü—Ä–∏—á–∏–Ω–∞ —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {escalation_reason}\n"
                    "–í—Ä–µ–º—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {escalation_time}\n"
                    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG, NotificationChannel.EMAIL]
            ),
            
            # –≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É
            NotificationTemplate(
                template_id="human_escalation",
                notification_type=NotificationType.HUMAN_ESCALATION,
                priority=NotificationPriority.CRITICAL,
                title_template="üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –≠–°–ö–ê–õ–ê–¶–ò–Ø: {step_title}",
                message_template=(
                    "–¢–†–ï–ë–£–ï–¢–°–Ø –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û –ß–ï–õ–û–í–ï–ö–ê!\n"
                    "–®–∞–≥ '{step_title}' —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {error_count}\n"
                    "–ü—Ä–∏—á–∏–Ω–∞: {escalation_reason}\n"
                    "–í—Ä–µ–º—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏: {escalation_time}\n"
                    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:\n{recent_errors}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG, NotificationChannel.EMAIL, NotificationChannel.WEBHOOK]
            ),
            
            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
            NotificationTemplate(
                template_id="autocorrection",
                notification_type=NotificationType.AUTOCORRECTION,
                priority=NotificationPriority.LOW,
                title_template="üîß –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: {step_title}",
                message_template=(
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —à–∞–≥–∞ '{step_title}'.\n"
                    "ID —à–∞–≥–∞: {step_id}\n"
                    "–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {original_command}\n"
                    "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {corrected_command}\n"
                    "–¢–∏–ø –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {correction_type}\n"
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç: {correction_result}\n"
                    "–í—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {correction_time}"
                ),
                channels=[NotificationChannel.LOG]
            ),
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            NotificationTemplate(
                template_id="system_status",
                notification_type=NotificationType.SYSTEM_STATUS,
                priority=NotificationPriority.MEDIUM,
                title_template="üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
                message_template=(
                    "–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.\n"
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_tasks}\n"
                    "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {completed_tasks}\n"
                    "–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {failed_tasks}\n"
                    "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {total_errors}\n"
                    "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {report_time}"
                ),
                channels=[NotificationChannel.CONSOLE, NotificationChannel.LOG]
            )
        ]
        
        for template in templates:
            self.templates[template.template_id] = template
        
        self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    def send_notification(self, notification_type: NotificationType, context: Dict[str, Any], 
                         custom_channels: Optional[List[NotificationChannel]] = None) -> Notification:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            custom_channels: –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–∑ —à–∞–±–ª–æ–Ω–∞)
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
        template = self._find_template(notification_type, context)
        if not template:
            self.logger.warning("–®–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", notification_type=notification_type.value)
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not self._check_conditions(template, context):
            self.logger.debug("–£—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", template_id=template.template_id)
            return None
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
        title, message = template.render(context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
        channels = custom_channels or template.channels
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_id = f"notif_{notification_type.value}_{int(time.time() * 1000)}"
        notification = Notification(
            notification_id=notification_id,
            notification_type=notification_type,
            priority=template.priority,
            title=title,
            message=message,
            timestamp=datetime.now(),
            channels=channels,
            task_id=context.get("task_id"),
            step_id=context.get("step_id"),
            metadata=context
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self._send_notification(notification)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notifications[notification_id] = notification
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats(notification)
        
        self.logger.info(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            notification_id=notification_id,
            notification_type=notification_type.value,
            priority=template.priority.value,
            channels=[channel.value for channel in channels]
        )
        
        return notification
    
    def send_task_started(self, task_id: str, task_title: str, task_description: str, 
                         total_steps: int, priority: str = "medium") -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "task_description": task_description,
            "total_steps": total_steps,
            "priority": priority,
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.TASK_STARTED, context)
    
    def send_task_progress(self, task_id: str, task_title: str, completed_steps: int, 
                          total_steps: int, current_step_title: str, elapsed_time: str) -> Optional[Notification]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–¥–∞—á–∏"""
        progress_percentage = (completed_steps / total_steps * 100) if total_steps > 0 else 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫–∞–∂–¥—ã–µ 25%)
        if progress_percentage % 25 != 0 and completed_steps != total_steps:
            return None
        
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "completed_steps": completed_steps,
            "total_steps": total_steps,
            "progress_percentage": progress_percentage,
            "current_step_title": current_step_title,
            "elapsed_time": elapsed_time
        }
        return self.send_notification(NotificationType.TASK_PROGRESS, context)
    
    def send_task_completed(self, task_id: str, task_title: str, total_duration: str, 
                           completed_steps: int, total_steps: int, error_count: int) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "total_duration": total_duration,
            "completed_steps": completed_steps,
            "total_steps": total_steps,
            "error_count": error_count,
            "completion_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.TASK_COMPLETED, context)
    
    def send_task_failed(self, task_id: str, task_title: str, failure_reason: str, 
                        completed_steps: int, total_steps: int, error_count: int) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ –∑–∞–¥–∞—á–∏"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "failure_reason": failure_reason,
            "completed_steps": completed_steps,
            "total_steps": total_steps,
            "error_count": error_count,
            "failure_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.TASK_FAILED, context)
    
    def send_step_started(self, task_id: str, task_title: str, step_id: str, 
                         step_title: str, step_description: str) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —à–∞–≥–∞"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "step_description": step_description,
            "start_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.STEP_STARTED, context)
    
    def send_step_completed(self, task_id: str, task_title: str, step_id: str, 
                           step_title: str, duration: str) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "duration": duration,
            "completion_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.STEP_COMPLETED, context)
    
    def send_step_failed(self, task_id: str, task_title: str, step_id: str, 
                        step_title: str, error_message: str, retry_count: int, 
                        autocorrection_applied: bool) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ —à–∞–≥–∞"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "error_message": error_message,
            "retry_count": retry_count,
            "autocorrection_applied": "–î–∞" if autocorrection_applied else "–ù–µ—Ç",
            "failure_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.STEP_FAILED, context)
    
    def send_error_escalation(self, task_id: str, task_title: str, step_id: str, 
                             step_title: str, error_count: int, error_threshold: int, 
                             escalation_reason: str) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "error_count": error_count,
            "error_threshold": error_threshold,
            "escalation_reason": escalation_reason,
            "escalation_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.ERROR_ESCALATION, context)
    
    def send_human_escalation(self, task_id: str, task_title: str, step_id: str, 
                             step_title: str, error_count: int, escalation_reason: str, 
                             recent_errors: List[Dict[str, Any]]) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        errors_text = "\n".join([
            f"- {error.get('command', 'Unknown')}: {error.get('error_message', 'Unknown error')[:100]}"
            for error in recent_errors[:3]
        ])
        
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "error_count": error_count,
            "escalation_reason": escalation_reason,
            "recent_errors": errors_text,
            "escalation_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.HUMAN_ESCALATION, context)
    
    def send_autocorrection(self, task_id: str, task_title: str, step_id: str, 
                           step_title: str, original_command: str, corrected_command: str, 
                           correction_type: str, correction_result: str) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
        context = {
            "task_id": task_id,
            "task_title": task_title,
            "step_id": step_id,
            "step_title": step_title,
            "original_command": original_command,
            "corrected_command": corrected_command,
            "correction_type": correction_type,
            "correction_result": correction_result,
            "correction_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.AUTOCORRECTION, context)
    
    def send_system_status(self, active_tasks: int, completed_tasks: int, 
                          failed_tasks: int, total_errors: int) -> Notification:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã"""
        context = {
            "active_tasks": active_tasks,
            "completed_tasks": completed_tasks,
            "failed_tasks": failed_tasks,
            "total_errors": total_errors,
            "report_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        return self.send_notification(NotificationType.SYSTEM_STATUS, context)
    
    def _find_template(self, notification_type: NotificationType, context: Dict[str, Any]) -> Optional[NotificationTemplate]:
        """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        for template in self.templates.values():
            if template.notification_type == notification_type and template.enabled:
                return template
        return None
    
    def _check_conditions(self, template: NotificationTemplate, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        if not template.conditions:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if "progress_interval" in template.conditions:
            progress = context.get("progress_percentage", 0)
            interval = template.conditions["progress_interval"]
            if progress % interval != 0:
                return False
        
        return True
    
    def _send_notification(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"""
        for channel in notification.channels:
            try:
                if channel == NotificationChannel.EMAIL:
                    self._send_email(notification)
                elif channel == NotificationChannel.WEBHOOK:
                    self._send_webhook(notification)
                elif channel == NotificationChannel.CONSOLE:
                    self._send_console(notification)
                elif channel == NotificationChannel.FILE:
                    self._send_file(notification)
                elif channel == NotificationChannel.LOG:
                    self._send_log(notification)
                
                notification.delivery_status[channel.value] = "sent"
                
            except Exception as e:
                self.logger.error(
                    f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ {channel.value}",
                    error=str(e),
                    notification_id=notification.notification_id
                )
                notification.delivery_status[channel.value] = f"failed: {str(e)}"
        
        notification.sent = True
        notification.sent_at = datetime.now()
    
    def _send_email(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        config = self.channel_configs[NotificationChannel.EMAIL]
        
        if not config.get("enabled", False):
            return
        
        try:
            msg = MIMEMultipart()
            msg['From'] = config.get("from_address", "")
            msg['To'] = ", ".join(config.get("to_addresses", []))
            msg['Subject'] = notification.title
            
            body = notification.message
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(config.get("smtp_server", ""), config.get("smtp_port", 587))
            server.starttls()
            server.login(config.get("username", ""), config.get("password", ""))
            server.send_message(msg)
            server.quit()
            
            self.logger.info("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", notification_id=notification.notification_id)
            
        except Exception as e:
            self.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email", error=str(e))
            raise
    
    def _send_webhook(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        config = self.channel_configs[NotificationChannel.WEBHOOK]
        
        if not config.get("enabled", False):
            return
        
        try:
            import requests
            
            payload = notification.to_dict()
            
            response = requests.post(
                config.get("url", ""),
                json=payload,
                headers=config.get("headers", {}),
                timeout=config.get("timeout", 30)
            )
            
            if response.status_code == 200:
                self.logger.info("Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", notification_id=notification.notification_id)
            else:
                self.logger.warning(
                    "Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π",
                    notification_id=notification.notification_id,
                    status_code=response.status_code
                )
                
        except Exception as e:
            self.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook", error=str(e))
            raise
    
    def _send_console(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        config = self.channel_configs[NotificationChannel.CONSOLE]
        
        if not config.get("enabled", True):
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        colors = {
            NotificationPriority.LOW: "\033[94m",      # –°–∏–Ω–∏–π
            NotificationPriority.MEDIUM: "\033[93m",    # –ñ–µ–ª—Ç—ã–π
            NotificationPriority.HIGH: "\033[91m",      # –ö—Ä–∞—Å–Ω—ã–π
            NotificationPriority.CRITICAL: "\033[95m"   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        reset_color = "\033[0m"
        
        color = colors.get(notification.priority, "")
        
        print(f"\n{color}{'='*80}{reset_color}")
        print(f"{color}{notification.title}{reset_color}")
        print(f"{color}{'='*80}{reset_color}")
        print(notification.message)
        print(f"{color}{'='*80}{reset_color}\n")
    
    def _send_file(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        config = self.channel_configs[NotificationChannel.FILE]
        
        if not config.get("enabled", False):
            return
        
        file_path = config.get("file_path", "notifications.log")
        
        try:
            Path(file_path).parent.mkdir(parents=True, exist_ok=True)
            
            with open(file_path, "a", encoding="utf-8") as f:
                f.write(f"\n{'='*80}\n")
                f.write(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification.title}\n")
                f.write(f"–í—Ä–µ–º—è: {notification.timestamp.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {notification.priority.value}\n")
                f.write(f"–¢–∏–ø: {notification.notification_type.value}\n")
                f.write(f"{'='*80}\n")
                f.write(notification.message)
                f.write(f"\n{'='*80}\n")
            
            self.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ñ–∞–π–ª", notification_id=notification.notification_id)
            
        except Exception as e:
            self.logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª", error=str(e))
            raise
    
    def _send_log(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ª–æ–≥"""
        config = self.channel_configs[NotificationChannel.LOG]
        
        if not config.get("enabled", True):
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if notification.priority == NotificationPriority.CRITICAL:
            self.logger.critical(
                f"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {notification.title}",
                notification_id=notification.notification_id,
                notification_type=notification.notification_type.value,
                priority=notification.priority.value,
                message=notification.message
            )
        elif notification.priority == NotificationPriority.HIGH:
            self.logger.error(
                f"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {notification.title}",
                notification_id=notification.notification_id,
                notification_type=notification.notification_type.value,
                priority=notification.priority.value,
                message=notification.message
            )
        elif notification.priority == NotificationPriority.MEDIUM:
            self.logger.warning(
                f"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {notification.title}",
                notification_id=notification.notification_id,
                notification_type=notification.notification_type.value,
                priority=notification.priority.value,
                message=notification.message
            )
        else:
            self.logger.info(
                f"–£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {notification.title}",
                notification_id=notification.notification_id,
                notification_type=notification.notification_type.value,
                priority=notification.priority.value,
                message=notification.message
            )
    
    def _update_stats(self, notification: Notification):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats["notifications_sent"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        notif_type = notification.notification_type.value
        self.stats["notifications_by_type"][notif_type] = self.stats["notifications_by_type"].get(notif_type, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        priority = notification.priority.value
        self.stats["notifications_by_priority"][priority] = self.stats["notifications_by_priority"].get(priority, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        for channel in notification.channels:
            channel_name = channel.value
            self.stats["notifications_by_channel"][channel_name] = self.stats["notifications_by_channel"].get(channel_name, 0) + 1
    
    def get_notification_history(self, hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        cutoff_time = datetime.now() - timedelta(hours=hours)
        
        recent_notifications = [
            notification.to_dict()
            for notification in self.notifications.values()
            if notification.timestamp >= cutoff_time
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        recent_notifications.sort(key=lambda x: x["timestamp"], reverse=True)
        
        return recent_notifications
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            **self.stats,
            "total_notifications": len(self.notifications),
            "templates_count": len(self.templates),
            "channels_enabled": [
                channel.value for channel, config in self.channel_configs.items() 
                if config.get("enabled", False)
            ]
        }
    
    def cleanup_old_notifications(self, days: int = 7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        cutoff_time = datetime.now() - timedelta(days=days)
        
        old_notifications = [
            notification_id for notification_id, notification in self.notifications.items()
            if notification.timestamp < cutoff_time
        ]
        
        for notification_id in old_notifications:
            del self.notifications[notification_id]
        
        self.logger.info(
            "–°—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
            removed_count=len(old_notifications),
            retention_days=days
        )

