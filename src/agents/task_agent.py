"""
Task Agent - –ú–æ–¥–µ–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞–≥–æ–≤

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
- –†–∞–∑–±–∏–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏
- –°–∏—Å—Ç–µ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —à–∞–≥–æ–≤ (step_id)
- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å LLM –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Task Master –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤
"""
import json
import time
from typing import Dict, Any, Optional, List, Union
from dataclasses import dataclass
import logging

from ..config.agent_config import TaskAgentConfig, AgentConfig
from ..models.planning_model import Task, TaskStep, PlanningResult, TaskStatus, StepStatus, Priority
from ..models.llm_interface import LLMInterface, LLMRequest, LLMRequestBuilder, LLMInterfaceFactory
from ..agents.task_master_integration import TaskMasterIntegration, TaskMasterResult
from ..utils.logger import StructuredLogger


@dataclass
class TaskPlanningContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    
    server_info: Dict[str, Any]
    user_requirements: str
    constraints: List[str]
    available_tools: List[str]
    previous_tasks: List[Dict[str, Any]]
    environment: Dict[str, Any]


class TaskAgent:
    """
    –ê–≥–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —à–∞–≥–æ–≤
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –†–∞–∑–±–∏–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è —à–∞–≥–æ–≤
    - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Task Master –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤
    - –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤
    """
    
    def __init__(self, config: AgentConfig, task_master: Optional[TaskMasterIntegration] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Task Agent
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
            task_master: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Task Master
        """
        self.config = config
        self.task_agent_config = config.task_agent
        self.task_master = task_master
        self.logger = StructuredLogger("TaskAgent")
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        self.error_tracker = None
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å LLM
        self.llm_interface = LLMInterfaceFactory.create_interface(
            config.llm,
            self.logger,
            mock_mode=False  # –í production –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM
        if not self.llm_interface.is_available():
            self.logger.warning("LLM –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-—Ä–µ–∂–∏–º")
            self.llm_interface = LLMInterfaceFactory.create_interface(
                config.llm,
                self.logger,
                mock_mode=True
            )
        
        self.logger.info(
            "Task Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
            model=self.task_agent_config.model,
            max_steps=self.task_agent_config.max_steps,
            task_master_enabled=self.task_master is not None
        )
    
    def plan_task(self, task_description: str, context: Optional[TaskPlanningContext] = None) -> PlanningResult:
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ - —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏
        
        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–±–∏—Ç–æ–π –Ω–∞ —à–∞–≥–∏ –∑–∞–¥–∞—á–µ–π
        """
        start_time = time.time()
        
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", task_description=task_description)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É
            task = Task(
                title=self._extract_task_title(task_description),
                description=task_description,
                context=context.__dict__ if context else {}
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            planning_prompt = self._build_planning_prompt(task_description, context)
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ Task Master –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.task_master:
                improved_result = self._improve_prompt_with_taskmaster(planning_prompt, context)
                if improved_result.success:
                    planning_prompt = improved_result.data.get("improved_prompt", planning_prompt)
                    self.logger.info("–ü—Ä–æ–º—Ç —É–ª—É—á—à–µ–Ω —á–µ—Ä–µ–∑ Task Master")
                else:
                    self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ Task Master", error=improved_result.error)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
            llm_request = LLMRequestBuilder(
                default_model=self.task_agent_config.model,
                default_temperature=self.task_agent_config.temperature
            ).with_system_message(self._get_planning_system_message()).with_context(
                self._build_llm_context(context)
            ).build(planning_prompt, self.task_agent_config.max_tokens)
            
            llm_response = self.llm_interface.generate_response(llm_request)
            
            if not llm_response.success:
                return PlanningResult(
                    success=False,
                    error_message=f"–û—à–∏–±–∫–∞ LLM: {llm_response.error}",
                    planning_duration=time.time() - start_time
                )
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM –∏ —Å–æ–∑–¥–∞–µ–º —à–∞–≥–∏
            steps = self._parse_llm_response(llm_response.content, task.task_id)
            
            if not steps:
                return PlanningResult(
                    success=False,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —à–∞–≥–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM",
                    planning_duration=time.time() - start_time
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –∫ –∑–∞–¥–∞—á–µ
            for step in steps:
                task.add_step(step)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞–Ω
            validation_result = self._validate_plan(task)
            if not validation_result["valid"]:
                self.logger.warning("–ü–ª–∞–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é", 
                                  issues=validation_result["issues"],
                                  steps_count=validation_result["steps_count"],
                                  dependencies_count=validation_result["dependencies_count"])
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f"\n‚ùå –ü–õ–ê–ù –ù–ï –ü–†–û–®–ï–õ –í–ê–õ–ò–î–ê–¶–ò–Æ:")
                print(f"   –®–∞–≥–æ–≤: {validation_result['steps_count']}")
                print(f"   –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {validation_result['dependencies_count']}")
                print(f"   –ü—Ä–æ–±–ª–µ–º—ã:")
                for issue in validation_result["issues"]:
                    print(f"     ‚Ä¢ {issue}")
                print()
                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
            self._optimize_plan(task)
            
            planning_duration = time.time() - start_time
            
            self.logger.info(
                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                task_id=task.task_id,
                steps_count=len(task.steps),
                duration=planning_duration
            )
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
            print(f"\nüìã –°–û–ó–î–ê–ù –ü–õ–ê–ù –ó–ê–î–ê–ß–ò:")
            print(f"   ID –∑–∞–¥–∞—á–∏: {task.task_id}")
            print(f"   –®–∞–≥–æ–≤: {len(task.steps)}")
            print(f"   –í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {planning_duration:.2f}—Å")
            print(f"   –®–∞–≥–∏:")
            for i, step in enumerate(task.steps, 1):
                print(f"     {i}. {step.title}")
                if step.description:
                    print(f"        {step.description}")
            print()
            
            return PlanningResult(
                success=True,
                task=task,
                planning_duration=planning_duration,
                llm_usage=llm_response.usage,
                metadata={
                    "validation_result": validation_result,
                    "task_master_used": self.task_master is not None
                }
            )
            
        except Exception as e:
            planning_duration = time.time() - start_time
            error_msg = f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
            self.logger.error("–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏", error=error_msg, duration=planning_duration)
            
            return PlanningResult(
                success=False,
                error_message=error_msg,
                planning_duration=planning_duration
            )
    
    def _extract_task_title(self, description: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        lines = description.strip().split('\n')
        first_line = lines[0].strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(first_line) > 100:
            first_line = first_line[:97] + "..."
        
        return first_line
    
    def _build_planning_prompt(self, task_description: str, context: Optional[TaskPlanningContext] = None) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        prompt_parts = [
            "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä–∞—Ö. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏.",
            "",
            f"–ó–ê–î–ê–ß–ê: {task_description}",
            "",
            "–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Æ:",
            "1. –†–∞–∑–±–µ–π –∑–∞–¥–∞—á—É –Ω–∞ 3-10 –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤",
            "2. –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º",
            "3. –£–∫–∞–∂–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –ø–æ –ò–ù–î–ï–ö–°–ê–ú (0, 1, 2, ...), –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º",
            "4. –û—Ü–µ–Ω–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö",
            "5. –ü—Ä–∏—Å–≤–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∂–¥–æ–º—É —à–∞–≥—É (low, medium, high, critical)",
            "6. –®–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)",
            "",
            "–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):",
            "{",
            '  "steps": [',
            '    {',
            '      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞",',
            '      "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞",',
            '      "priority": "high",',
            '      "estimated_duration": 15,',
            '      "dependencies": [0, 1]',
            '    }',
            '  ]',
            "}",
            "",
            "–í–ê–ñ–ù–û:",
            "- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
            "- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
            "- –£–±–µ–¥–∏—Å—å —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π",
            "- –®–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            prompt_parts.extend([
                "",
                "–ö–û–ù–¢–ï–ö–°–¢:",
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ: {json.dumps(context.server_info, ensure_ascii=False)}",
                f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(context.constraints)}",
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(context.available_tools)}"
            ])
        
        return "\n".join(prompt_parts)
    
    def _get_planning_system_message(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä–∞—Ö. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ –ø–ª–∞–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á.
–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç—Ä–æ–≥–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
    
    def _build_llm_context(self, context: Optional[TaskPlanningContext] = None) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM"""
        llm_context = {
            "max_steps": self.task_agent_config.max_steps,
            "planning_guidelines": [
                "–®–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—ã–º–∏",
                "–ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞",
                "–ò–∑–±–µ–≥–∞–π –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                "–£—á–∏—Ç—ã–≤–∞–π –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å"
            ]
        }
        
        if context:
            llm_context.update({
                "server_info": context.server_info,
                "constraints": context.constraints,
                "available_tools": context.available_tools,
                "environment": context.environment
            })
        
        return llm_context
    
    def _improve_prompt_with_taskmaster(self, prompt: str, context: Optional[TaskPlanningContext] = None) -> TaskMasterResult:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ —á–µ—Ä–µ–∑ Task Master"""
        if not self.task_master:
            return TaskMasterResult(success=False, error="Task Master –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        taskmaster_context = {
            "prompt_type": "planning",
            "agent_type": "task_agent",
            "max_steps": self.task_agent_config.max_steps
        }
        
        if context:
            taskmaster_context.update({
                "server_info": context.server_info,
                "constraints": context.constraints
            })
        
        return self.task_master.improve_prompt(prompt, taskmaster_context)
    
    def _parse_llm_response(self, response_content: str, task_id: str) -> List[TaskStep]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–≥–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            cleaned_content = response_content.strip()
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_start = cleaned_content.find('{')
            json_end = cleaned_content.rfind('}') + 1
            
            if json_start == -1 or json_end == 0:
                self.logger.error("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM", response_preview=cleaned_content[:200])
                return []
            
            json_content = cleaned_content[json_start:json_end]
            
            # –ü–∞—Ä—Å–∏–º JSON
            data = json.loads(json_content)
            steps_data = data.get("steps", [])
            
            if not steps_data:
                self.logger.error("–®–∞–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON –æ—Ç–≤–µ—Ç–µ")
                return []
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã TaskStep
            steps = []
            for i, step_data in enumerate(steps_data):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ ID —à–∞–≥–æ–≤
                    dependencies = step_data.get("dependencies", [])
                    if dependencies:
                        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                        step = TaskStep(
                            title=step_data.get("title", f"–®–∞–≥ {i+1}"),
                            description=step_data.get("description", ""),
                            priority=Priority(step_data.get("priority", "medium")),
                            estimated_duration=step_data.get("estimated_duration"),
                            dependencies=[],  # –ü–æ–∫–∞ –ø—É—Å—Ç—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                            metadata={
                                "task_id": task_id,
                                "step_order": i + 1,
                                "llm_generated": True
                            }
                        )
                        steps.append(step)
                    else:
                        step = TaskStep(
                            title=step_data.get("title", f"–®–∞–≥ {i+1}"),
                            description=step_data.get("description", ""),
                            priority=Priority(step_data.get("priority", "medium")),
                            estimated_duration=step_data.get("estimated_duration"),
                            dependencies=[],
                            metadata={
                                "task_id": task_id,
                                "step_order": i + 1,
                                "llm_generated": True
                            }
                        )
                        steps.append(step)
                    
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–≥–∞ {i+1}", error=str(e))
                    continue
            
            # –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            for i, step_data in enumerate(steps_data):
                dependencies = step_data.get("dependencies", [])
                if dependencies and i < len(steps):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ ID —à–∞–≥–æ–≤
                    step_dependencies = []
                    for dep_index in dependencies:
                        if isinstance(dep_index, int) and 0 <= dep_index < len(steps):
                            step_dependencies.append(steps[dep_index].step_id)
                        else:
                            self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {dep_index}")
                    steps[i].dependencies = step_dependencies
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(steps)} —à–∞–≥–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM")
            return steps
            
        except json.JSONDecodeError as e:
            self.logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ LLM", error=str(e), response_preview=response_content[:200])
            return []
        except Exception as e:
            self.logger.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ LLM", error=str(e))
            return []
    
    def _validate_plan(self, task: Task) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
        if len(task.steps) == 0:
            issues.append("–ü–ª–∞–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–≥–æ–≤")
        elif len(task.steps) > self.task_agent_config.max_steps:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à–∞–≥–æ–≤: {len(task.steps)} > {self.task_agent_config.max_steps}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        step_ids = {step.step_id for step in task.steps}
        for step in task.steps:
            for dep in step.dependencies:
                if dep not in step_ids:
                    issues.append(f"–®–∞–≥ {step.step_id} —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {dep}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if self._has_cyclic_dependencies(task.steps):
            issues.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        steps_without_deps = [step for step in task.steps if not step.dependencies]
        if not steps_without_deps:
            issues.append("–ù–µ—Ç —à–∞–≥–æ–≤ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ø–ª–∞–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º—ã–º)")
        
        return {
            "valid": len(issues) == 0,
            "issues": issues,
            "steps_count": len(task.steps),
            "dependencies_count": sum(len(step.dependencies) for step in task.steps)
        }
    
    def _has_cyclic_dependencies(self, steps: List[TaskStep]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        graph = {step.step_id: step.dependencies for step in steps}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DFS –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤
        visited = set()
        rec_stack = set()
        
        def has_cycle(node):
            visited.add(node)
            rec_stack.add(node)
            
            for neighbor in graph.get(node, []):
                if neighbor not in visited:
                    if has_cycle(neighbor):
                        return True
                elif neighbor in rec_stack:
                    return True
            
            rec_stack.remove(node)
            return False
        
        for step_id in graph:
            if step_id not in visited:
                if has_cycle(step_id):
                    return True
        
        return False
    
    def _optimize_plan(self, task: Task):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –∑–∞–¥–∞—á–∏"""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–≥–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        self._sort_steps_by_execution_order(task)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
        total_duration = sum(
            step.estimated_duration for step in task.steps 
            if step.estimated_duration is not None
        )
        task.total_estimated_duration = total_duration
        
        self.logger.debug(
            "–ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω",
            total_duration=total_duration,
            steps_count=len(task.steps)
        )
    
    def _sort_steps_by_execution_order(self, task: Task):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —à–∞–≥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sorted_steps = []
        visited = set()
        temp_visited = set()
        
        def visit(step):
            if step.step_id in temp_visited:
                return  # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            if step.step_id in visited:
                return
            
            temp_visited.add(step.step_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–µ—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            for dep_id in step.dependencies:
                dep_step = task.get_step(dep_id)
                if dep_step:
                    visit(dep_step)
            
            temp_visited.remove(step.step_id)
            visited.add(step.step_id)
            sorted_steps.append(step)
        
        # –ü–æ—Å–µ—â–∞–µ–º –≤—Å–µ —à–∞–≥–∏
        for step in task.steps:
            if step.step_id not in visited:
                visit(step)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —à–∞–≥–æ–≤
        task.steps = sorted_steps
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for i, step in enumerate(task.steps):
            step.metadata["execution_order"] = i + 1
    
    def get_task_status(self, task: Task) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        return {
            "task_id": task.task_id,
            "title": task.title,
            "status": task.status.value,
            "progress": task.get_progress(),
            "steps": [
                {
                    "step_id": step.step_id,
                    "title": step.title,
                    "status": step.status.value,
                    "priority": step.priority.value,
                    "error_count": step.error_count
                }
                for step in task.steps
            ]
        }
    
    def update_step_status(self, task: Task, step_id: str, status: StepStatus, 
                          error_count: Optional[int] = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞"""
        step = task.get_step(step_id)
        if not step:
            self.logger.warning(f"–®–∞–≥ {step_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–¥–∞—á–µ {task.task_id}")
            return False
        
        step.status = status
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–æ –≤—ã–∑–æ–≤–∞ mark_failed()
        if error_count is not None:
            step.error_count = error_count
        
        if status == StepStatus.EXECUTING:
            step.mark_started()
        elif status == StepStatus.COMPLETED:
            step.mark_completed()
        elif status == StepStatus.FAILED:
            # –ï—Å–ª–∏ error_count –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mark_failed() –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            if error_count is None:
                step.mark_failed()
            # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å (—Å—á–µ—Ç—á–∏–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if self.error_tracker:
            escalation_level = self.error_tracker.get_escalation_level(step_id)
            if escalation_level.value == "planner_notification":
                self.logger.warning(
                    "–≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É",
                    task_id=task.task_id,
                    step_id=step_id,
                    error_count=step.error_count,
                    escalation_level=escalation_level.value
                )
            elif escalation_level.value == "human_escalation":
                self.logger.error(
                    "–≠—Å–∫–∞–ª–∞—Ü–∏—è –∫ —á–µ–ª–æ–≤–µ–∫—É",
                    task_id=task.task_id,
                    step_id=step_id,
                    error_count=step.error_count,
                    escalation_level=escalation_level.value
                )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        if task.is_completed():
            task.mark_completed()
        elif task.is_failed():
            task.mark_failed()
        
        self.logger.info(
            "–°—Ç–∞—Ç—É—Å —à–∞–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
            task_id=task.task_id,
            step_id=step_id,
            status=status.value,
            error_count=step.error_count,
            escalation_level=escalation_level.value if self.error_tracker else "none"
        )
        
        return True
    
    def get_step_error_summary(self, step_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞"""
        if self.error_tracker:
            return self.error_tracker.get_error_summary(step_id)
        return {"step_id": step_id, "error_count": 0, "attempt_count": 0, "success_rate": 0.0}
    
    def should_escalate_to_planner(self, step_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É"""
        if self.error_tracker:
            return self.error_tracker.should_escalate_to_planner(step_id)
        return False
    
    def should_escalate_to_human(self, step_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∫ —á–µ–ª–æ–≤–µ–∫—É"""
        if self.error_tracker:
            return self.error_tracker.should_escalate_to_human(step_id)
        return False
    
    def get_escalation_level(self, step_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –¥–ª—è —à–∞–≥–∞"""
        if self.error_tracker:
            return self.error_tracker.get_escalation_level(step_id).value
        return "none"
    
    def get_error_tracking_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫"""
        if self.error_tracker:
            return self.error_tracker.get_global_stats()
        return {"total_errors": 0, "total_attempts": 0, "success_rate": 0.0}
    
    def cleanup_old_error_records(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        if self.error_tracker:
            self.error_tracker.cleanup_old_records()
    
    def reset_step_error_stats(self, step_id: str):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —à–∞–≥–∞"""
        if self.error_tracker:
            self.error_tracker.reset_step_stats(step_id)
    
    def set_error_tracker(self, error_tracker):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –æ—à–∏–±–æ–∫"""
        self.error_tracker = error_tracker
